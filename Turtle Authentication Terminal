--[[
    Turtle Authentication Terminal (v1.0)
    by Gemini Gem

    Purpose:
    Demonstrates how to securely get a player's username without them
    typing it by using the turtle.inspect() API.

    How to Use:
    1. Place a turtle where you want your authentication terminal.
    2. Run this script.
    3. Stand directly in front of the turtle (touching it).
    4. Right-click the turtle to open its screen and press any key.
]]

--==============================================================================
-- Helper Functions
--==============================================================================

local function clearScreen()
    term.clear()
    term.setCursorPos(1, 1)
end

local function showMessage(message)
    clearScreen()
    local w, h = term.getSize()
    
    -- Simple centered text
    local lines = {}
    for line in message:gmatch("[^\n]+") do
        table.insert(lines, line)
    end
    
    local startY = math.floor((h - #lines) / 2) + 1
    for i, line in ipairs(lines) do
        local startX = math.floor((w - #line) / 2) + 1
        term.setCursorPos(startX, startY + i - 1)
        term.write(line)
    end
end

--==============================================================================
-- Main Authentication Logic
--==============================================================================

local function runAuthentication()
    showMessage("Welcome!\n\nPlease stand directly in front of this terminal\nand press any key to identify yourself.")
    
    -- Wait for the player to press a key
    os.pullEvent("key")

    showMessage("Inspecting...")
    sleep(0.5)

    -- The core of the logic: inspect the entity in front
    local success, data = turtle.inspect()

    if success and data and data.name and data.name ~= "unknown" then
        -- We found a player!
        local username = data.name
        showMessage("Identity confirmed.\n\nWelcome, " .. username .. "!")
        sleep(3)
        return username
    else
        -- We found a block, a non-player entity, or nothing.
        showMessage("Authentication Failed.\n\nNo player detected directly in front.\nPlease try again.")
        sleep(3)
        return nil
    end
end

--==============================================================================
-- Main Loop
--==============================================================================

while true do
    local authenticated_user = runAuthentication()
    if authenticated_user then
        -- You can now use the 'authenticated_user' variable to create an account,
        -- log them in, or perform other actions.
        print("User '" .. authenticated_user .. "' is now authenticated.")
        sleep(5)
    end
end
