--[[
    Drunken Beard Bank - Vault Clerk Turtle (v3.1 - Withdrawal Fix)
    by Gemini Gem

    Purpose:
    This version fixes a critical bug in the withdrawal logic that caused a
    crash. It replaces the incorrect use of peripheral.pullItems with the
    proper turtle.suck() commands, ensuring compatibility with blocks like
    Create Vaults. It now correctly handles specific item withdrawal requests
    from the updated ATM script.

    Setup:
    - Place this turtle adjacent to a "deposit" inventory (e.g., a barrel)
      and a "main vault" inventory (a Copper Chest or Create Vault).
    - It must have a wireless modem attached to any side.
    - Run this script on startup.
]]

--==============================================================================
-- Configuration
--==============================================================================

local protocol = "DB_ATM_Turtle"
local depositBlockName = "minecraft:barrel"
local vaultBlockName = "reinfchest:copper_chest"

--==============================================================================
-- Core Functions
--==============================================================================

local function findPeripherals()
    print("Scanning for peripherals...")
    
    local modem_side = peripheral.find("modem")
    if not modem_side then return nil, nil, nil, "No wireless modem attached." end
    modem_side = peripheral.getName(modem_side)
    print("Found Modem on: " .. modem_side)

    local deposit_side = peripheral.find(depositBlockName)
    if not deposit_side then return nil, nil, nil, "Could not find Deposit Barrel." end
    deposit_side = peripheral.getName(deposit_side)
    print("Found Deposit Barrel on: " .. deposit_side)

    local vault_side = peripheral.find(vaultBlockName)
    if not vault_side then return nil, nil, nil, "Could not find Main Vault." end
    vault_side = peripheral.getName(vault_side)
    print("Found Main Vault on: " .. vault_side)

    return modem_side, deposit_side, vault_side, nil
end

local function turnTo(targetSide)
    if targetSide == "left" then turtle.turnLeft()
    elseif targetSide == "right" then turtle.turnRight()
    elseif targetSide == "back" then turtle.turnRight(); turtle.turnRight() end
end

local function turnToFront(originalSide)
    if originalSide == "left" then turtle.turnRight()
    elseif originalSide == "right" then turtle.turnLeft()
    elseif originalSide == "back" then turtle.turnLeft(); turtle.turnLeft() end
end

local function collectFromDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 64 do
        if deposit_side == "top" then turtle.suckUp()
        elseif deposit_side == "bottom" then turtle.suckDown()
        else turtle.suck() end
    end
    turnToFront(deposit_side)
end

local function getInventoryContents()
    local contents = {}
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item then
            table.insert(contents, { name = item.name, count = item.count })
        end
    end
    return contents
end

local function depositToVault(vault_side)
    turnTo(vault_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if vault_side == "top" then turtle.dropUp()
            elseif vault_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(vault_side)
end

local function returnItemsToDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if deposit_side == "top" then turtle.dropUp()
            elseif deposit_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(deposit_side)
end

local function handleDeposit(atmId, deposit_side, vault_side)
    collectFromDeposit(deposit_side)
    local itemsInTurtle = getInventoryContents()
    rednet.send(atmId, { type = "deposit_count", items = itemsInTurtle }, protocol)
    local _, message = rednet.receive(protocol, 15)

    if message and message.type == "confirm_deposit" then
        depositToVault(vault_side)
        print("Successfully processed deposit.")
    else
        returnItemsToDeposit(deposit_side)
        print("Deposit failed or was cancelled. Returned items.")
    end
end

local function handleDispense(atmId, itemToDispense, count, vault_side, deposit_side)
    local vault = peripheral.wrap(vault_side)
    if not vault then
        rednet.send(atmId, { success = false, reason = "Clerk could not access vault." }, protocol)
        return
    end

    -- 1. Find the requested item in the vault
    local itemSlot = -1
    for i=1, vault.size() do
        local item = vault.getItemDetail(i)
        if item and item.name == itemToDispense then
            itemSlot = i
            break
        end
    end

    if itemSlot == -1 then
        rednet.send(atmId, { success = false, reason = "Requested item not found in vault." }, protocol)
        return
    end

    -- 2. Suck the requested amount
    turnTo(vault_side)
    local suckedAmount = 0
    while suckedAmount < count do
        turtle.select(1) -- Always work with the first slot
        local success, reason = vault.pushItems(peripheral.getName(turtle.getInventory()), itemSlot, 1)
        if not success then
            print("Error pulling from vault: " .. tostring(reason))
            -- Return what we have so far and abort
            depositToVault(vault_side)
            rednet.send(atmId, { success = false, reason = "Vault interaction failed." }, protocol)
            return
        end
        suckedAmount = suckedAmount + 1
    end
    turnToFront(vault_side)

    -- 3. Drop the items into the deposit barrel
    returnItemsToDeposit(deposit_side)

    -- 4. Confirm completion
    rednet.send(atmId, { success = true }, protocol)
    print("Successfully dispensed " .. count .. " of " .. itemToDispense)
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    local modem_side, deposit_side, vault_side, err = findPeripherals()
    if err then
        print("Error: " .. err)
        return
    end

    rednet.open(modem_side)
    rednet.host(protocol, "bank_turtle_" .. os.getComputerID())
    print("Vault Clerk Turtle online. Waiting for ATM commands...")

    while true do
        local senderId, message, proto = rednet.receive(protocol)
        if message and message.type then
            if message.type == "request_deposit" then
                print("Received deposit request from ATM " .. senderId)
                handleDeposit(senderId, deposit_side, vault_side)
            elseif message.type == "request_dispense" then
                print("Received dispense request for " .. message.count .. " " .. message.item_name)
                handleDispense(senderId, message.item_name, message.count, vault_side, deposit_side)
            end
        end
    end
end

main()
