--[[
    Drunken Beard Bank - Vault Clerk Turtle (v3.2 - Definitive Fix)
    by Gemini Gem

    Purpose:
    This definitive version fixes a critical runtime error in the withdrawal
    logic caused by an incorrect API call. It now correctly uses the standard
    peripheral name for the turtle's own inventory.

    Key Changes:
    - Replaced the call to the non-existent `turtle.getInventory()` with the
      correct peripheral name, `"turtle"`.
    - The `handleDispense` function is now fully operational and stable.
]]

--==============================================================================
-- Configuration
--==============================================================================

local protocol = "DB_ATM_Turtle"
local depositBlockName = "minecraft:barrel"
local vaultBlockName = "reinfchest:copper_chest"

--==============================================================================
-- Core Functions
--==============================================================================

local function findPeripherals()
    print("Scanning for peripherals...")
    
    local modem_side = peripheral.find("modem")
    if not modem_side then return nil, nil, nil, "No wireless modem attached." end
    modem_side = peripheral.getName(modem_side)
    print("Found Modem on: " .. modem_side)

    local deposit_side = peripheral.find(depositBlockName)
    if not deposit_side then return nil, nil, nil, "Could not find Deposit Barrel." end
    deposit_side = peripheral.getName(deposit_side)
    print("Found Deposit Barrel on: " .. deposit_side)

    local vault_side = peripheral.find(vaultBlockName)
    if not vault_side then return nil, nil, nil, "Could not find Main Vault." end
    vault_side = peripheral.getName(vault_side)
    print("Found Main Vault on: " .. vault_side)

    return modem_side, deposit_side, vault_side, nil
end

local function turnTo(targetSide)
    if targetSide == "left" then turtle.turnLeft()
    elseif targetSide == "right" then turtle.turnRight()
    elseif targetSide == "back" then turtle.turnRight(); turtle.turnRight() end
end

local function turnToFront(originalSide)
    if originalSide == "left" then turtle.turnRight()
    elseif originalSide == "right" then turtle.turnLeft()
    elseif originalSide == "back" then turtle.turnLeft(); turtle.turnLeft() end
end

local function collectFromDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 64 do
        if deposit_side == "top" then turtle.suckUp()
        elseif deposit_side == "bottom" then turtle.suckDown()
        else turtle.suck() end
    end
    turnToFront(deposit_side)
end

local function getInventoryContents()
    local contents = {}
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item then
            table.insert(contents, { name = item.name, count = item.count })
        end
    end
    return contents
end

local function depositToVault(vault_side)
    turnTo(vault_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if vault_side == "top" then turtle.dropUp()
            elseif vault_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(vault_side)
end

local function returnItemsToDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if deposit_side == "top" then turtle.dropUp()
            elseif deposit_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(deposit_side)
end

local function handleDeposit(atmId, deposit_side, vault_side)
    collectFromDeposit(deposit_side)
    local itemsInTurtle = getInventoryContents()
    rednet.send(atmId, { type = "deposit_count", items = itemsInTurtle }, protocol)
    local _, message = rednet.receive(protocol, 15)

    if message and message.type == "confirm_deposit" then
        depositToVault(vault_side)
        print("Successfully processed deposit.")
    else
        returnItemsToDeposit(deposit_side)
        print("Deposit failed or was cancelled. Returned items.")
    end
end

local function handleDispense(atmId, itemToDispense, count, vault_side, deposit_side)
    local vault = peripheral.wrap(vault_side)
    if not vault then
        rednet.send(atmId, { success = false, reason = "Clerk could not access vault." }, protocol)
        return
    end

    local itemSlot = -1
    for i=1, vault.size() do
        local item = vault.getItemDetail(i)
        if item and item.name == itemToDispense then
            itemSlot = i
            break
        end
    end

    if itemSlot == -1 then
        rednet.send(atmId, { success = false, reason = "Requested item not found in vault." }, protocol)
        return
    end

    local suckedAmount = 0
    while suckedAmount < count do
        -- THE FIX: Use the correct peripheral name "turtle" as the target for pushItems.
        local success, reason = vault.pushItems("turtle", itemSlot, 1)
        if not success then
            print("Error pulling from vault: " .. tostring(reason))
            returnItemsToDeposit(deposit_side) -- Return anything we accidentally pulled
            rednet.send(atmId, { success = false, reason = "Vault interaction failed." }, protocol)
            return
        end
        suckedAmount = suckedAmount + 1
    end

    returnItemsToDeposit(deposit_side)

    rednet.send(atmId, { success = true }, protocol)
    print("Successfully dispensed " .. count .. " of " .. itemToDispense)
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    local modem_side, deposit_side, vault_side, err = findPeripherals()
    if err then
        print("Error: " .. err)
        return
    end

    rednet.open(modem_side)
    rednet.host(protocol, "bank_turtle_" .. os.getComputerID())
    print("Vault Clerk Turtle online. Waiting for ATM commands...")

    while true do
        local senderId, message, proto = rednet.receive(protocol)
        if message and message.type then
            if message.type == "request_deposit" then
                print("Received deposit request from ATM " .. senderId)
                handleDeposit(senderId, deposit_side, vault_side)
            elseif message.type == "request_dispense" then
                print("Received dispense request for " .. message.count .. " " .. message.item_name)
                handleDispense(senderId, message.item_name, message.count, vault_side, deposit_side)
            end
        end
    end
end

main()
