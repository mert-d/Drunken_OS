--[[
    Drunken Beard Bank - Vault Clerk Turtle (v3.5 - Syntax & Logic Fix)
    by Gemini Gem & MuhendizBey

    Purpose:
    This definitive version fixes a critical syntax error in the dynamic
    peripheral discovery function by removing the problematic 'goto' statement.
    The logic is now cleaner, more robust, and uses standard loop control.

    Key Changes:
    - Re-engineered the findPeripherals() function to use 'break' instead of 'goto',
      resolving the "'=' expected" syntax error.
    - Preserved the dynamic vault discovery and direct-transfer withdrawal logic.
]]

--==============================================================================
-- Configuration
--==============================================================================

local protocol = "DB_ATM_Turtle"
local depositBlockName = "minecraft:barrel"

--==============================================================================
-- Core Functions (Re-Engineered)
--==============================================================================

---
-- Scans for required peripherals and dynamically identifies the vault.
-- @return The names of the modem, deposit side, vault side, or an error.
local function findPeripherals()
    print("Scanning for peripherals...")
    
    local modem_side = peripheral.find("modem")
    if not modem_side then return nil, nil, nil, "No wireless modem attached." end
    modem_side = peripheral.getName(modem_side)
    print("Found Modem on: " .. modem_side)

    local deposit_side = peripheral.find(depositBlockName)
    if not deposit_side then return nil, nil, nil, "Could not find Deposit Barrel." end
    deposit_side = peripheral.getName(deposit_side)
    print("Found Deposit Barrel on: " .. deposit_side)

    -- THE FIX: Dynamic Vault Discovery using standard loops and 'break'.
    local vault_side = nil
    for _, name in ipairs(peripheral.getNames()) do
        if name ~= modem_side and name ~= deposit_side then
            local types = { peripheral.getTypes(name) }
            for _, p_type in ipairs(types) do
                if p_type == "inventory" then
                    vault_side = name
                    break -- Exit the inner 'types' loop
                end
            end
        end
        if vault_side then
            break -- Exit the outer 'peripherals' loop
        end
    end

    if not vault_side then
        return nil, nil, nil, "Could not find a valid vault inventory peripheral."
    end
    
    print("Dynamically found Vault (".. peripheral.getType(vault_side) ..") on: " .. vault_side)
    return modem_side, deposit_side, vault_side, nil
end

local function turnTo(targetSide)
    if targetSide == "left" then turtle.turnLeft()
    elseif targetSide == "right" then turtle.turnRight()
    elseif targetSide == "back" then turtle.turnRight(); turtle.turnRight() end
end

local function turnToFront(originalSide)
    if originalSide == "left" then turtle.turnRight()
    elseif originalSide == "right" then turtle.turnLeft()
    elseif originalSide == "back" then turtle.turnLeft(); turtle.turnLeft() end
end

local function collectFromDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 64 do turtle.suck() end
    turnToFront(deposit_side)
end

local function depositToVault(vault_side)
    turnTo(vault_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            turtle.drop()
        end
    end
    turnToFront(vault_side)
end

local function returnItemsToDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            turtle.drop()
        end
    end
    turnToFront(deposit_side)
end

local function handleDeposit(atmId, deposit_side, vault_side)
    collectFromDeposit(deposit_side)
    
    local itemsInTurtle = {}
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item then
            table.insert(itemsInTurtle, { name = item.name, count = item.count })
        end
    end

    rednet.send(atmId, { type = "deposit_count", items = itemsInTurtle }, protocol)
    local _, message = rednet.receive(protocol, 15)

    if message and message.type == "confirm_deposit" then
        depositToVault(vault_side)
        rednet.send(atmId, { success = true, new_balance = message.new_balance }, protocol)
        print("Successfully processed deposit.")
    else
        returnItemsToDeposit(deposit_side)
        rednet.send(atmId, { success = false, reason = "Deposit cancelled or timed out." }, protocol)
        print("Deposit failed. Returned items.")
    end
end

local function handleDispense(atmId, itemToDispense, count, vault_side, deposit_side)
    local vault = peripheral.wrap(vault_side)
    if not vault then
        rednet.send(atmId, { success = false, reason = "Clerk could not access vault." }, protocol)
        return
    end

    local itemSlot = -1
    for i = 1, vault.size() do
        local item = vault.getItemDetail(i)
        if item and item.name == itemToDispense then
            itemSlot = i
            break
        end
    end

    if itemSlot == -1 then
        rednet.send(atmId, { success = false, reason = "Requested item not found in vault." }, protocol)
        return
    end

    print("Commanding vault to transfer " .. count .. " " .. itemToDispense .. "...")
    local success, reason = vault.pushItems(deposit_side, itemSlot, count)
    
    if not success then
        print("Error during vault transfer: " .. tostring(reason))
        rednet.send(atmId, { success = false, reason = "Vault transfer failed." }, protocol)
        return
    end
    
    rednet.send(atmId, { success = true }, protocol)
    print("Successfully dispensed " .. count .. " of " .. itemToDispense)
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    local modem_side, deposit_side, vault_side, err = findPeripherals()
    if err then
        print("Error: " .. err)
        return
    end

    rednet.open(modem_side)
    local host_protocol = protocol .. "_" .. os.getComputerID()
    rednet.host(host_protocol, "bank_turtle")
    print("Vault Clerk Turtle online (ID " .. os.getComputerID() .. "). Waiting for commands...")

    while true do
        local senderId, message, proto = rednet.receive()
        if message and message.type and proto == protocol then
            if message.type == "ping" then
                rednet.send(senderId, { type = "pong" }, protocol)
            elseif message.type == "request_deposit" then
                handleDeposit(senderId, deposit_side, vault_side)
            elseif message.type == "request_dispense" then
                handleDispense(senderId, message.item_name, message.count, vault_side, deposit_side)
            end
        end
    end
end

main()
