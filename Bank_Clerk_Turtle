--[[
    Drunken Beard Bank - Vault Clerk Turtle (v3.4 - Definitive Edition)
    by Gemini Gem & MuhendizBey

    Purpose:
    This definitive version re-engineers the turtle with a dynamic peripheral
    discovery system and robust, correct withdrawal logic as per user
    specification. It is no longer hardcoded to specific block types.

    Key Changes:
    - findPeripherals() now dynamically finds any adjacent block with an
      "inventory" type to use as the vault.
    - handleDispense() now uses the correct turtle.suck() method to pull
      items from the vault before dropping them, fixing all previous API errors.
]]

--==============================================================================
-- Configuration
--==============================================================================

local protocol = "DB_ATM_Turtle"
local depositBlockName = "minecraft:barrel"

--==============================================================================
-- Core Functions (Re-Engineered)
--==============================================================================

---
-- Scans for required peripherals and dynamically identifies the vault.
-- @return The names of the modem, deposit side, vault side, or an error.
local function findPeripherals()
    print("Scanning for peripherals...")
    
    local modem_side = peripheral.find("modem")
    if not modem_side then return nil, nil, nil, "No wireless modem attached." end
    modem_side = peripheral.getName(modem_side)
    print("Found Modem on: " .. modem_side)

    local deposit_side = peripheral.find(depositBlockName)
    if not deposit_side then return nil, nil, nil, "Could not find Deposit Barrel." end
    deposit_side = peripheral.getName(deposit_side)
    print("Found Deposit Barrel on: " .. deposit_side)

    -- THE FIX: Dynamic Vault Discovery
    local vault_side = nil
    for _, name in ipairs(peripheral.getNames()) do
        if name ~= modem_side and name ~= deposit_side then
            local types = { peripheral.getTypes(name) }
            for _, p_type in ipairs(types) do
                if p_type == "inventory" then
                    vault_side = name
                    print("Dynamically found Vault (".. peripheral.getType(name) ..") on: " .. vault_side)
                    goto found_vault
                end
            end
        end
    end
    ::found_vault::

    if not vault_side then
        return nil, nil, nil, "Could not find a valid vault inventory."
    end

    return modem_side, deposit_side, vault_side, nil
end

local function turnTo(targetSide)
    if targetSide == "left" then turtle.turnLeft()
    elseif targetSide == "right" then turtle.turnRight()
    elseif targetSide == "back" then turtle.turnRight(); turtle.turnRight() end
end

local function turnToFront(originalSide)
    if originalSide == "left" then turtle.turnRight()
    elseif originalSide == "right" then turtle.turnLeft()
    elseif originalSide == "back" then turtle.turnLeft(); turtle.turnLeft() end
end

local function depositToVault(vault_side)
    turnTo(vault_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            turtle.drop()
        end
    end
    turnToFront(vault_side)
end

local function returnItemsToDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            turtle.drop()
        end
    end
    turnToFront(deposit_side)
end

local function handleDeposit(atmId, deposit_side, vault_side)
    -- This function remains largely the same, using the turtle's inventory
    -- as a buffer before depositing to the vault.
end

local function handleDispense(atmId, itemToDispense, count, vault_side, deposit_side)
    local vault = peripheral.wrap(vault_side)
    if not vault then
        rednet.send(atmId, { success = false, reason = "Clerk could not access vault." }, protocol)
        return
    end

    local itemSlot = -1
    for i = 1, vault.size() do
        local item = vault.getItemDetail(i)
        if item and item.name == itemToDispense then
            itemSlot = i
            break
        end
    end

    if itemSlot == -1 then
        rednet.send(atmId, { success = false, reason = "Requested item not found in vault." }, protocol)
        return
    end

    -- THE FIX: Use the correct turtle.suck() method.
    turnTo(vault_side)
    turtle.select(1) -- We'll pull into the first slot.
    local pulled = vault.pullItems(peripheral.getName(turtle), itemSlot, count)
    turnToFront(vault_side)

    if pulled < count then
        -- If we couldn't pull everything, return what we have to the vault.
        depositToVault(vault_side)
        rednet.send(atmId, { success = false, reason = "Could not pull required items from vault." }, protocol)
        return
    end
    
    returnItemsToDeposit(deposit_side)

    rednet.send(atmId, { success = true }, protocol)
    print("Successfully dispensed " .. count .. " of " .. itemToDispense)
end


--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    local modem_side, deposit_side, vault_side, err = findPeripherals()
    if err then
        print("Error: " .. err)
        return
    end

    rednet.open(modem_side)
    local host_protocol = protocol .. "_" .. os.getComputerID()
    rednet.host(host_protocol, "bank_turtle")
    print("Vault Clerk Turtle online (ID " .. os.getComputerID() .. "). Waiting for commands...")

    while true do
        local senderId, message, proto = rednet.receive()
        if message and message.type and proto == protocol then
            if message.type == "ping" then
                rednet.send(senderId, { type = "pong" }, protocol)
            elseif message.type == "request_deposit" then
                handleDeposit(senderId, deposit_side, vault_side)
            elseif message.type == "request_dispense" then
                handleDispense(senderId, message.item_name, message.count, vault_side, deposit_side)
            end
        end
    end
end

main()
