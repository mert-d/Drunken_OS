--[[
    Drunken Beard Bank - Vault Clerk Turtle (v3.0 - Dynamic Economy Update)
    by Gemini Gem

    Purpose:
    This version overhauls the turtle's logic to support the multi-currency
    dynamic economy. It no longer checks for a single hard-coded currency.
    Instead, it gathers all items from the deposit barrel, sends a complete
    list to the ATM, and then acts on the server's instructions. It also
    handles complex withdrawal requests for multiple item types.

    Setup:
    - Place this turtle adjacent to a "deposit" inventory (e.g., a barrel)
      and a "main vault" inventory (a Copper Chest or Create Vault).
    - It must have a wireless modem attached to any side.
    - Run this script on startup.
]]

--==============================================================================
-- Configuration
--==============================================================================

-- The rednet protocol for communication between the ATM and this turtle.
local protocol = "DB_ATM_Turtle"

-- The names of the inventory peripherals.
-- These can be any inventory block, such as chests, barrels, or Create vaults.
local depositBlockName = "minecraft:barrel"
local vaultBlockName = "reinfchest:copper_chest" -- Can also be "create:vault"

--==============================================================================
-- Core Functions
--==============================================================================

-- Finds and verifies the required peripherals (modem, deposit, and vault).
local function findPeripherals()
    print("Scanning for peripherals...")
    
    local modem_side = peripheral.find("modem")
    if not modem_side then return nil, nil, nil, "No wireless modem attached." end
    modem_side = peripheral.getName(modem_side)
    print("Found Modem on: " .. modem_side)

    local deposit_side = peripheral.find(depositBlockName)
    if not deposit_side then return nil, nil, nil, "Could not find Deposit Barrel." end
    deposit_side = peripheral.getName(deposit_side)
    print("Found Deposit Barrel on: " .. deposit_side)

    local vault_side = peripheral.find(vaultBlockName)
    if not vault_side then return nil, nil, nil, "Could not find Main Vault." end
    vault_side = peripheral.getName(vault_side)
    print("Found Main Vault on: " .. vault_side)

    return modem_side, deposit_side, vault_side, nil
end

-- Helper function to make the turtle turn to face a specific side.
local function turnTo(targetSide)
    if targetSide == "left" then
        turtle.turnLeft()
    elseif targetSide == "right" then
        turtle.turnRight()
    elseif targetSide == "back" then
        turtle.turnRight()
        turtle.turnRight()
    end
end

-- Helper function to make the turtle turn back to its original forward-facing direction.
local function turnToFront(originalSide)
    if originalSide == "left" then
        turtle.turnRight()
    elseif originalSide == "right" then
        turtle.turnLeft()
    elseif originalSide == "back" then
        turtle.turnLeft()
        turtle.turnLeft()
    end
end

-- Collects all items from the deposit barrel.
local function collectFromDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 64 do -- Attempt to suck from all possible slots
        if deposit_side == "top" then
            turtle.suckUp()
        elseif deposit_side == "bottom" then
            turtle.suckDown()
        else
            turtle.suck()
        end
    end
    turnToFront(deposit_side)
end

-- Scans the turtle's inventory and returns a table of all items.
local function getInventoryContents()
    local contents = {}
    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item then
            table.insert(contents, { name = item.name, count = item.count })
        end
    end
    return contents
end

-- Deposits all items from the turtle's inventory into the vault.
local function depositToVault(vault_side)
    turnTo(vault_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if vault_side == "top" then turtle.dropUp()
            elseif vault_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(vault_side)
end

-- Returns all items in the turtle's inventory to the deposit barrel.
local function returnItemsToDeposit(deposit_side)
    turnTo(deposit_side)
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount(i) > 0 then
            if deposit_side == "top" then turtle.dropUp()
            elseif deposit_side == "bottom" then turtle.dropDown()
            else turtle.drop() end
        end
    end
    turnToFront(deposit_side)
end

-- Handles a deposit request from the ATM.
local function handleDeposit(atmId, deposit_side, vault_side)
    collectFromDeposit(deposit_side)
    
    local itemsInTurtle = getInventoryContents()
    
    -- Send the detailed item list to the ATM
    rednet.send(atmId, { type = "deposit_count", items = itemsInTurtle }, protocol)
    
    local _, message = rednet.receive(protocol, 15)

    if message and message.type == "confirm_deposit" then
        depositToVault(vault_side)
        print("Successfully processed deposit.")
    else
        returnItemsToDeposit(deposit_side)
        print("Deposit failed or was cancelled. Returned items.")
    end
end

-- Handles a dispense/withdrawal request from the ATM.
local function handleDispense(atmId, itemsToDispense, vault_side, deposit_side)
    local vault = peripheral.wrap(vault_side)
    if not vault then
        rednet.send(atmId, { success = false, reason = "Clerk could not access vault." }, protocol)
        return
    end

    -- 1. Suck all required items from the vault
    turnTo(vault_side)
    for _, itemRequest in ipairs(itemsToDispense) do
        local remaining = itemRequest.count
        while remaining > 0 do
            local pulled = vault.pullItems(peripheral.getName(turtle.getInventory()), itemRequest.name, remaining)
            if pulled == 0 then
                -- This indicates a problem, vault may not have the items it thought it did.
                print("Error: Could not pull " .. itemRequest.name .. " from vault.")
                -- Return everything we've already pulled
                depositToVault(vault_side) 
                rednet.send(atmId, { success = false, reason = "Vault stock mismatch." }, protocol)
                return
            end
            remaining = remaining - pulled
        end
    end
    turnToFront(vault_side)

    -- 2. Drop the collected items into the deposit barrel
    returnItemsToDeposit(deposit_side)

    -- 3. Confirm completion
    rednet.send(atmId, { success = true }, protocol)
    print("Successfully dispensed items.")
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    local modem_side, deposit_side, vault_side, err = findPeripherals()
    if err then
        print("Error: " .. err)
        return
    end

    rednet.open(modem_side)
    rednet.host(protocol, "bank_turtle_" .. os.getComputerID())
    print("Vault Clerk Turtle online. Waiting for ATM commands...")

    while true do
        local senderId, message, proto = rednet.receive(protocol)
        if message and message.type then
            if message.type == "request_deposit" then
                print("Received deposit request from ATM " .. senderId)
                handleDeposit(senderId, deposit_side, vault_side)
            elseif message.type == "request_dispense" then
                print("Received dispense request from ATM " .. senderId)
                handleDispense(senderId, message.items, vault_side, deposit_side)
            end
        end
    end
end

main()

