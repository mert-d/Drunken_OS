--[[
    SimpleMail & Chat Client (v11.2 - Final Polish)
    by Gemini Gem

    Purpose:
    This definitive version integrates a robust game updater into the main
    startup sequence, consolidates the UI, and ensures the modular
    architecture is fully implemented and bug-free.

    Key Changes:
    - Added a new `updateGames` function that runs once on startup to
      automatically download and update all games from the server.
    - The client now creates a `games/` directory for these files.
    - The `programDir` variable is now correctly passed into the application
      library via the `context` table, fixing the "string expected, got nil" error.
    - The main menu has been consolidated for a cleaner user interface.
]]

--==============================================================================
-- Environment & Path Setup
--==============================================================================

-- Get the directory where this program is running.
local programDir = fs.getDir(shell.getRunningProgram())

-- Add the program's local library folder to the list of places Lua looks for modules.
package.path = fs.combine(programDir, "lib/?.lua;") .. package.path

--==============================================================================
-- Configuration & State
--==============================================================================

local currentVersion = 11.2
local programName = "mail"
local SESSION_FILE = ".session"
local REQUIRED_LIBS = { "sha1_hmac", "drunken_os_apps" }

-- This table holds the shared state of the application
local state = {
    username = nil,
    nickname = nil,
    unreadCount = 0,
    isAdmin = false,
    mailServerId = nil,
    chatServerId = nil,
    arcadeServerId = nil,
    adminServerId = nil,
    crypto = nil, -- Loaded after install
    apps = nil -- Loaded after install
}

--==============================================================================
-- UI & Theme
--==============================================================================

local hasColor = term.isColor and term.isColor()
local function safeColor(colorName, fallbackColor)
    if hasColor and colors[colorName] ~= nil then
        return colors[colorName]
    end
    return fallbackColor
end

local theme = {
    bg = safeColor("black", colors.black),
    text = safeColor("white", colors.white),
    windowBg = safeColor("darkGray", colors.gray),
    border = safeColor("lightGray", colors.white),
    title = safeColor("green", colors.lime),
    prompt = safeColor("cyan", colors.cyan),
    highlightBg = safeColor("blue", colors.blue),
    highlightText = safeColor("white", colors.white),
    statusBarBg = safeColor("gray", colors.lightGray),
    statusBarText = safeColor("white", colors.white),
}

--==============================================================================
-- Core Utility & UI Functions
--==============================================================================

local function getSafeSize()
    local w, h = term.getSize()
    while not w or not h do
        sleep(0.05)
        w, h = term.getSize()
    end
    return w, h
end

local function wordWrap(text, width)
    local lines = {}
    for line in text:gmatch("[^\r\n]+") do
        while #line > width do
            local space = line:sub(1, width + 1):match(".+ ")
            local len = space and #space or width
            table.insert(lines, line:sub(1, len - 1))
            line = line:sub(len):match("^%s*(.*)")
        end
        table.insert(lines, line)
    end
    return lines
end

local function clear()
    term.setBackgroundColor(theme.bg)
    term.clear()
    term.setCursorPos(1, 1)
end

local function drawWindow(title)
    clear()
    local w, h = getSafeSize()
    term.setBackgroundColor(theme.windowBg)
    for y = 1, h - 1 do
        term.setCursorPos(1, y)
        term.write(string.rep(" ", w))
    end

    term.setBackgroundColor(theme.title)
    term.setCursorPos(1, 1)
    term.write(string.rep(" ", w))
    term.setTextColor(colors.white)
    local titleText = " " .. title .. " "
    term.setCursorPos(math.floor((w - #titleText) / 2) + 1, 1)
    term.write(titleText)
    
    term.setBackgroundColor(theme.statusBarBg)
    term.setTextColor(theme.statusBarText)
    term.setCursorPos(1, h)
    term.write(string.rep(" ", w))
    local userText = "User: " .. (state.nickname or "Guest") .. (state.isAdmin and " (Admin)" or "")
    local versionText = "v" .. currentVersion
    
    if w < 35 then
        local statusText = userText .. " | " .. versionText
        term.setCursorPos(math.floor((w - #statusText) / 2) + 1, h)
        term.write(statusText)
    else
        local helpText = "See 'Help' Menu for Controls"
        term.setCursorPos(2, h)
        term.write(userText)
        term.setCursorPos(w - #versionText, h)
        term.write(versionText)
        term.setCursorPos(math.floor((w - #helpText) / 2) + 1, h)
        term.write(helpText)
    end

    term.setBackgroundColor(theme.windowBg)
    term.setTextColor(theme.text)
end

local function drawMenu(options, selectedIndex, startX, startY)
    for i, option in ipairs(options) do
        local text = option
        if (option == "Mail" or option == "View Inbox") and state.unreadCount > 0 then
            text = text .. " [" .. state.unreadCount .. "]"
        end
        term.setCursorPos(startX, startY + i - 1)
        if i == selectedIndex then
            term.setBackgroundColor(theme.highlightBg)
            term.setTextColor(theme.highlightText)
            term.write("> " .. text .. string.rep(" ", 25 - #text))
        else
            term.setBackgroundColor(theme.windowBg)
            term.setTextColor(theme.text)
            term.write("  " .. text .. string.rep(" ", 25 - #text))
        end
    end
    term.setBackgroundColor(theme.windowBg)
end

local function showMessage(title, message)
    drawWindow(title)
    local w, h = getSafeSize()
    local lines = wordWrap(message, w - 4)
    for i, line in ipairs(lines) do
        term.setCursorPos(3, 4 + i - 1)
        term.write(line)
    end
    term.setCursorPos(3, 4 + #lines + 1)
    term.setTextColor(theme.prompt)
    term.write("Press any key to continue...")
    os.pullEvent("key")
    term.setTextColor(theme.text)
end

local function readInput(prompt, y, hideText)
    local x = 2
    term.setTextColor(theme.prompt)
    term.setCursorPos(x, y)
    term.write(prompt)
    term.setTextColor(theme.text)
    term.setCursorPos(x + #prompt, y)
    term.setCursorBlink(true)
    local input = hideText and read("*") or read()
    term.setCursorBlink(false)
    return input
end

-- Create the context table that will be passed to library functions
local context = {
    getSafeSize = getSafeSize,
    wordWrap = wordWrap,
    clear = clear,
    drawWindow = drawWindow,
    drawMenu = drawMenu,
    showMessage = showMessage,
    readInput = readInput,
    theme = theme,
    programDir = programDir, -- Pass the program's directory to the library
    parent = state -- a reference to the main state table
}

--==============================================================================
-- Installation & Update Functions
--==============================================================================

local function findServers()
    drawWindow("Connecting")
    term.setCursorPos(2, 4); term.write("Searching for servers...")

    state.mailServerId = rednet.lookup("SimpleMail", "mail.server")
    state.chatServerId = rednet.lookup("SimpleChat", "chat.server")
    state.arcadeServerId = rednet.lookup("ArcadeGames", "arcade.server")
    state.adminServerId = rednet.lookup("Drunken_Admin", "admin.server")

    if not state.mailServerId or not state.chatServerId or not state.arcadeServerId then
        return false, "Could not find all required servers."
    end
    if not state.adminServerId then
        print("Admin server not found. Admin console disabled.")
    end
    return true
end

local function installDependencies()
    local yPos = 4
    drawWindow("First-Time Setup")
    term.setCursorPos(2, yPos); term.write("Checking for required libraries..."); yPos = yPos + 1

    local libDir = fs.combine(programDir, "lib")
    if not fs.exists(libDir) then
        term.setCursorPos(2, yPos); term.write("- Creating library directory..."); yPos = yPos + 1
        fs.makeDir(libDir)
    end

    for _, libName in ipairs(REQUIRED_LIBS) do
        local localLibPath = fs.combine(libDir, libName .. ".lua")
        if not fs.exists(localLibPath) then
            term.setCursorPos(2, yPos); term.write("- Requesting library: " .. libName); yPos = yPos + 1
            
            rednet.send(state.mailServerId, { type = "get_lib_paste", lib_name = libName }, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 10)

            if response and response.code then
                term.setCursorPos(2, yPos); term.write("- Downloading via Pastebin..."); yPos = yPos + 1
                local success = shell.run("pastebin", "get", response.code, localLibPath)
                if not success then
                    showMessage("Installation Error", "Pastebin download failed. Check HTTP is enabled.")
                    return false
                end
            else
                showMessage("Installation Error", "Failed to download '"..libName.."' from server.")
                return false
            end
        end
    end

    local ok_c, lib_c = pcall(require, "lib.sha1_hmac")
    local ok_a, lib_a = pcall(require, "lib.drunken_os_apps")
    if ok_c and ok_a then
        state.crypto = lib_c
        state.apps = lib_a
    else
        showMessage("Installation Error", "Failed to load a critical library. The program cannot continue.")
        return false
    end
    
    term.setCursorPos(2, yPos); term.write("Setup complete!"); yPos = yPos + 1
    sleep(1.5)
    return true
end

local function autoUpdateCheck()
    drawWindow("Updater")
    term.setCursorPos(2, 4); term.write("Checking for client updates...")
    rednet.send(state.mailServerId, {type = "get_version", program = programName}, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 3)
    
    if response and response.version and response.version > currentVersion then
        term.setCursorPos(2, 6); term.write("Update found! v"..response.version.." is available.")
        term.setCursorPos(2, 7); term.write("Downloading...")
        rednet.send(state.mailServerId, {type = "get_update", program = programName}, "SimpleMail")
        local _, update = rednet.receive("SimpleMail", 10)
        
        if update and update.code then
            local savePath = shell.getRunningProgram()
            local file = fs.open(savePath, "w")
            if not file then
                showMessage("Update Error", "Could not open file for writing.")
                return false
            end
            file.write(update.code)
            file.close()
            
            term.setCursorPos(2, 9); term.write("Update complete! Restarting...")
            sleep(2)
            shell.run(savePath)
            return true
        else
            showMessage("Error", "Update download failed.")
        end
    end
    return false
end

local function updateGames()
    drawWindow("Game Updater")
    local yPos = 4
    term.setCursorPos(2, yPos); term.write("Checking for game updates..."); yPos = yPos + 1

    local gamesDir = fs.combine(programDir, "games")
    if not fs.exists(gamesDir) then
        term.setCursorPos(2, yPos); term.write("- Creating games directory..."); yPos = yPos + 1
        fs.makeDir(gamesDir)
    end

    rednet.send(state.mailServerId, { type = "get_all_game_versions" }, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 10)

    if not response or not response.versions then
        term.setCursorPos(2, yPos); term.write("- Could not fetch server game versions.")
        sleep(2)
        return
    end

    for filename, serverVersion in pairs(response.versions) do
        local localPath = fs.combine(gamesDir, filename)
        local needsUpdate = true
        
        if fs.exists(localPath) then
            local file = fs.open(localPath, "r")
            if file then
                local content = file.readAll()
                file.close()
                local localVersion = tonumber(string.match(content, "%-%-%s*Version:%s*([%d%.]+)"))
                if localVersion and localVersion >= serverVersion then
                    needsUpdate = false
                end
            end
        end

        if needsUpdate then
            term.setCursorPos(2, yPos)
            term.clearLine()
            term.write("- Updating game: " .. filename .. "...")
            
            rednet.send(state.mailServerId, { type = "get_game_update", filename = filename }, "SimpleMail")
            local _, gameUpdate = rednet.receive("SimpleMail", 10)

            if gameUpdate and gameUpdate.code then
                local file = fs.open(localPath, "w")
                if file then
                    file.write(gameUpdate.code)
                    file.close()
                end
            end
        end
    end
    
    term.setCursorPos(2, yPos); term.write("All games are up to date!")
    sleep(1.5)
end

--==============================================================================
-- Login & Main Menu Logic
--==============================================================================

local function completeAuthentication(user)
    drawWindow("Authentication Required")
    local w, h = getSafeSize()
    local message = "A token has been sent to the Auth Server admin. Please ask them for your token and enter it below."
    local lines = wordWrap(message, w - 4)
    for i, line in ipairs(lines) do
        term.setCursorPos(3, 4 + i - 1)
        term.write(line)
    end
    
    local token_raw = readInput("Auth Token: ", 4 + #lines + 2, false)
    if not token_raw or token_raw == "" then
        showMessage("Cancelled", "Authentication cancelled.")
        return false
    end

    local token_clean = token_raw:gsub("%s+", "")
    drawWindow("Verifying Token...")
    rednet.send(state.mailServerId, { type = "submit_auth_token", user = user, token = token_clean }, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 10)

    if response and response.success then
        state.username = user
        state.nickname = response.nickname
        state.unreadCount = response.unreadCount or 0
        state.isAdmin = response.isAdmin or false
        if response.session_token then
            local file = fs.open(SESSION_FILE, "w")
            if file then
                file.write(response.session_token)
                file.close()
            end
        end
        showMessage("Success", "Authentication successful!")
        return true
    else
        showMessage("Authentication Failed", response.reason or "No response from server.")
        return false
    end
end

function loginOrRegister()
    local options = {"Login", "Register", "Exit"}
    local selected = 1
    while not state.username do
        drawWindow("Welcome")
        drawMenu(options, selected, 2, 5)
        local event, key = os.pullEvent("key")
        if key == keys.up then
            selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then
            selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then -- Login
                drawWindow("Login")
                local user = readInput("Username: ", 5, false)
                if user and user ~= "" then
                    local pass = readInput("Password: ", 7, true)
                    if pass and pass ~= "" then
                        local session_token = nil
                        if fs.exists(SESSION_FILE) then
                            local file = fs.open(SESSION_FILE, "r")
                            if file then
                                session_token = file.readAll()
                                file.close()
                            end
                        end
                        
                        rednet.send(state.mailServerId, { type = "login", user = user, pass = pass, session_token = session_token }, "SimpleMail")
                        local _, response = rednet.receive("SimpleMail", 10)

                        if response and response.success then
                            if response.needs_auth then
                                if not completeAuthentication(user) then
                                    state.username = nil
                                end
                            else
                                state.username = user
                                state.nickname = response.nickname
                                state.unreadCount = response.unreadCount or 0
                                state.isAdmin = response.isAdmin or false
                            end
                        else
                            showMessage("Login Failed", response.reason or "No response.")
                        end
                    end
                end
            elseif selected == 2 then -- Register
                drawWindow("Register")
                local user = readInput("Choose Username: ", 5, false)
                if user and user ~= "" then
                    local nick = readInput("Choose Nickname: ", 7, false)
                    if nick and nick ~= "" then
                        local pass = readInput("Choose Password: ", 9, true)
                        if pass and pass ~= "" then
                            rednet.send(state.mailServerId, { type = "register", user = user, pass = pass, nickname = nick }, "SimpleMail")
                            local _, response = rednet.receive("SimpleMail", 5)
                            if response and response.success and response.needs_auth then
                                if not completeAuthentication(user) then
                                    state.username = nil
                                end
                            else
                                showMessage("Registration Failed", response.reason or "No response.")
                            end
                        end
                    end
                end
            elseif selected == 3 then
                return false
            end
        elseif key == keys.tab then
            return false
        end
    end
    return true
end

function mainMenu()
    local options = {"Mail", "Manage Lists", "General Chat", "Play Games", "Send Feedback"}
    if state.isAdmin and state.adminServerId then
        table.insert(options, "Admin Console")
    end
    table.insert(options, "Settings")
    table.insert(options, "Help")
    table.insert(options, "Exit")

    local selected = 1
    local pollTimer = os.startTimer(10)
    local needsRedraw = true
    
    local ok, err = pcall(function()
        rednet.unhost("SimpleMail")
        rednet.host("SimpleMail", "client." .. state.username)
    end)
    if not ok then
        showMessage("Login Error", "This user is already logged in elsewhere.")
        state.username = nil
        return
    end

    while true do
        if needsRedraw then
            drawWindow("Main Menu")
            drawMenu(options, selected, 2, 3)
            needsRedraw = false
        end

        local event, p1, p2, p3 = os.pullEvent("key", "timer", "rednet_message", "terminate")
        if event == "key" then
            if p1 == keys.up then
                selected = (selected == 1) and #options or selected - 1
            elseif p1 == keys.down then
                selected = (selected == #options) and 1 or selected + 1
            elseif p1 == keys.enter then
                local action = options[selected]
                if action == "Mail" then state.apps.mailMenu(context)
                elseif action == "Manage Lists" then state.apps.manageLists(context)
                elseif action == "General Chat" then state.apps.startChat(context)
                elseif action == "Play Games" then state.apps.enterArcade(context)
                elseif action == "Send Feedback" then state.apps.sendFeedback(context)
                elseif action == "Admin Console" then state.apps.adminConsole(context)
                elseif action == "Settings" then
                    if state.apps.settingsMenu(context) then return end
                elseif action == "Help" then state.apps.showHelpScreen(context)
                elseif action == "Exit" then return end
                needsRedraw = true
            elseif p1 == keys.tab or p1 == keys.q then
                return
            end
            needsRedraw = true
        elseif event == "timer" and p1 == pollTimer then
            rednet.send(state.mailServerId, {type = "get_unread_count", user = state.username}, "SimpleMail")
            pollTimer = os.startTimer(10)
        elseif event == "rednet_message" and p3 == "SimpleMail" then
            if p2.type == "broadcast" then
                showMessage("Broadcast", p2.text)
                needsRedraw = true
            elseif p2.type == "unread_count_response" and p2.count ~= state.unreadCount then
                state.unreadCount = p2.count
                needsRedraw = true
            end
        elseif event == "terminate" then
            return
        end
    end
end

--==============================================================================
-- Program Entry Point
--==============================================================================

local function showSplashScreen()
    clear()
    term.setTextColor(colors.orange)
    local w,h = getSafeSize()
    local art = {
        "         . .        ",
        "       .. . *.      ",
        "- -_ _-__-0oOo      ",
        " _-_ -__ -||||)     ",
        "    ______||||______",
        "~~~~~~~~~~`\"\"'~   "
    }
    local title = "Drunken Beard OS"
    local startY = math.floor(h / 2) - math.floor(#art / 2) - 2
    for i, line in ipairs(art) do
        term.setCursorPos(math.floor(w / 2 - #line / 2), startY + i)
        term.write(line)
    end
    term.setCursorPos(math.floor(w / 2 - #title / 2), startY + #art + 2)
    term.write(title)
    sleep(1.5)
end

local function main()
    showSplashScreen()
    while true do
        rednet.open("back")
        local connected, reason = findServers()
        if not connected then
            showMessage("Connection Error", reason or "Could not find servers. Retrying...", true)
            sleep(5)
        else
            if autoUpdateCheck() then return end
            
            if not installDependencies() then
                rednet.close("back"); sleep(5); os.reboot(); return
            end
            
            updateGames() -- Update all games after initial setup
            
            state.username = nil
            state.isAdmin = false
            if not loginOrRegister() then
                clear(); print("Goodbye!"); break
            end
            
            rednet.send(state.mailServerId, {type = "get_motd"}, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 3)
            if response and response.motd and response.motd ~= "" then
                showMessage("Message of the Day", response.motd)
            end
            
            mainMenu()
            
            rednet.close("back")
            if not state.username then
                clear(); print("Goodbye!"); break
            end
        end
    end
end

main()

