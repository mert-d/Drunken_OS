--[[
    SimpleMail & Chat Client (v11.11 - Final Loader)
    by Gemini Gem & MuhendizBey

    Purpose:
    This definitive client version completes the modular refactor. All UI and
    application logic has been moved to the 'drunken_os_apps' library. This
    script is now solely responsible for startup, dependency installation,
    updates, and login.

    Key Changes:
    - Removed mainMenu() and all related UI functions.
    - The main() loop now calls apps.mainMenu() after a successful login.
]]

--==============================================================================
-- Environment & Path Setup
--==============================================================================

local programDir = fs.getDir(shell.getRunningProgram())
package.path = fs.combine(programDir, "lib/?.lua;") .. package.path

--==============================================================================
-- Configuration & State
--==============================================================================

local currentVersion = 11.11
local programName = "Drunken_OS_Client"
local SESSION_FILE = ".session"
local REQUIRED_LIBS = { "sha1_hmac", "drunken_os_apps" }

-- Declare placeholders for our libraries. They will be loaded later.
local crypto = nil
local apps = nil

local state = {
    mailServerId = nil,
    chatServerId = nil,
    gameServerId = nil,
    username = nil,
    nickname = nil,
    session_token = nil,
    isAdmin = false,
    programDir = programDir,
    crypto = nil, -- Placeholder for the crypto library
    apps = nil,   -- Placeholder for the apps library
    -- Pass UI functions from the apps library into the state for internal use.
    showMessage = nil,
    drawMenu = nil,
    drawWindow = nil,
    getSafeSize = nil,
    wordWrap = nil
}

--==============================================================================
-- Core Functions (Loader and Setup)
--==============================================================================

local function findServers()
    state.mailServerId = rednet.lookup("SimpleMail", "mail.server")
    if not state.mailServerId then return false, "Cannot find mail.server" end
    
    state.chatServerId = rednet.lookup("SimpleChat", "chat.server")
    if not state.chatServerId then return false, "Cannot find chat.server" end

    state.gameServerId = rednet.lookup("ArcadeGames", "arcade.server")
    if not state.gameServerId then return false, "Cannot find arcade.server" end
    
    return true
end

local function autoUpdateCheck()
    rednet.send(state.mailServerId, { type = "get_version", program = programName }, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 3)
    if response and response.version and response.version > currentVersion then
        term.clear(); term.setCursorPos(1, 1)
        print("New version available: " .. response.version)
        print("Downloading update...")
        rednet.send(state.mailServerId, { type = "get_update", program = programName }, "SimpleMail")
        local _, update = rednet.receive("SimpleMail", 10)
        if update and update.code then
            local path = shell.getRunningProgram()
            local file = fs.open(path, "w")
            file.write(update.code)
            file.close()
            print("Update complete. Rebooting...")
            sleep(2)
            os.reboot()
            return true
        else
            print("Update failed.")
            sleep(2)
        end
    end
    return false
end

local function installDependencies()
    local needsReboot = false
    for _, libName in ipairs(REQUIRED_LIBS) do
        local ok = pcall(require, "lib." .. libName)
        if not ok then
            needsReboot = true
            term.clear(); term.setCursorPos(1,1)
            print("Missing required library: " .. libName)
            print("Attempting to download from server...")

            local server = rednet.lookup("SimpleMail", "mail.server")
            if not server then
                print("Error: Cannot find mail.server to download libraries.")
                print("Please check server and network connection.")
                return false
            end

            rednet.send(server, { type = "get_lib_code", lib = libName }, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 10)
            
            if response and response.success and response.code then
                print("Download successful. Installing...")
                local libPath = fs.combine(programDir, "lib/" .. libName .. ".lua")
                if not fs.isDir(fs.combine(programDir, "lib")) then
                    fs.makeDir(fs.combine(programDir, "lib"))
                end

                local file, err = fs.open(libPath, "w")
                if not file then
                    print("Error: Could not open file for writing at:")
                    print(libPath)
                    print("Reason: " .. tostring(err))
                    return false
                end
                
                file.write(response.code)
                file.close()
                print("Library '" .. libName .. "' installed.")
                sleep(1)
            else
                print("Error: Could not download library.")
                print("Reason: " .. (response and response.reason or "Timeout"))
                return false
            end
        end
    end
    
    if needsReboot then
        print("All libraries installed. Rebooting...")
        sleep(2)
        os.reboot()
        return true 
    end
    
    return true
end

local function loginOrRegister()
    -- This function now depends on the apps library for its UI.
    while true do
        local choice = state.apps.drawMenu(state, "Welcome to Drunken OS", {"Login", "Register", "Exit"}, "Select an option")
        if choice == 1 then
            if state.apps.login(state) then return true end
        elseif choice == 2 then
            if state.apps.register(state) then return true end
        else
            return false
        end
    end
end

local function showSplashScreen()
    local w, h = term.getSize()
    local art = {
        "  ____                __                ______  ____",
        " /    )_  _  _  _    /  )  _   _   _   /      /      ",
        "(    /  / _/ /_/ /  /  /  / /  / /  / /(     (       ",
        " \\     / / / / /   /  /  / /  / /  / /  \\_    \\_    ",
        "  \\___) / / / /   (__/  (_/  (_/  /_/ ____)____)   ",
        "                                                    "
    }
    local title = "Client v" .. currentVersion
    local startY = math.floor((h - #art) / 2)
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.red)
    term.clear()
    for i, line in ipairs(art) do
        term.setCursorPos(math.floor(w / 2 - #line / 2), startY + i)
        term.write(line)
    end
    term.setCursorPos(math.floor(w / 2 - #title / 2), startY + #art + 2)
    term.write(title)
    sleep(1.5)
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function main()
    showSplashScreen()
    while true do
        rednet.open("back")
        local connected, reason = findServers()
        if not connected then
            -- Can't use showMessage yet as apps library is not loaded.
            term.clear(); term.setCursorPos(1,1);
            print("Connection Error: " .. (reason or "Could not find servers."))
            print("Retrying in 5 seconds...")
            sleep(5)
        else
            if autoUpdateCheck() then return end
            
            if not installDependencies() then
                rednet.close("back")
                print("Halting due to critical installation error.")
                return 
            end

            -- Stage 2: Load libraries now that they are guaranteed to exist.
            if not crypto then crypto = require("lib.sha1_hmac") end
            if not apps then apps = require("lib.drunken_os_apps") end

            -- Stage 3: Inject libraries and core functions into the state table.
            state.crypto = crypto
            state.apps = apps
            state.showMessage = apps.showMessage
            state.drawMenu = apps.drawMenu
            state.drawWindow = apps.drawWindow
            state.getSafeSize = apps.getSafeSize
            state.wordWrap = apps.wordWrap
            
            state.username = nil
            state.isAdmin = false
            if not loginOrRegister() then
                clear(); print("Goodbye!"); break
            end
            
            rednet.send(state.mailServerId, {type = "get_motd"}, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 3)
            if response and response.motd and response.motd ~= "" then
                state.showMessage("Message of the Day", response.motd)
            end
            
            -- Call the mainMenu, which is now correctly located in the apps library.
            state.apps.mainMenu(state) 
            
            rednet.close("back")
            if not state.username then
                clear(); print("Goodbye!"); break
            end
        end
    end
end

main()
