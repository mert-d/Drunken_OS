--[[
    SimpleMail & Chat Client (v10.5 - Robust Installer)
    by Gemini Gem

    Purpose:
    This version includes a critical fix to the dependency installer. It now
    creates a local `lib` folder relative to the script itself, rather than
    at the root directory. This ensures it works correctly on all computer
    types, including Pocket Computers which have a read-only root.

    Key Changes:
    - The `installDependencies` function now uses `fs.getDir(shell.getRunningProgram())`
      to find its own location.
    - It now creates and saves libraries to `<program_dir>/lib/`, guaranteeing
      it has the necessary filesystem permissions.
    - The `package.path` is updated to look in this new local library folder,
      making the entire client a self-contained application.
]]

--==============================================================================
-- Environment & Path Setup
--==============================================================================

-- Get the directory where this program is running.
local programDir = fs.getDir(shell.getRunningProgram())

-- Add the program's local library folder to the list of places Lua looks for modules.
package.path = fs.combine(programDir, "lib/?.lua;") .. package.path

--==============================================================================
-- Configuration & State
--==============================================================================

local currentVersion = 10.5
local programName = "mail"
local SESSION_FILE = ".session"
local REQUIRED_LIBS = { "sha1_hmac" } -- A list of libraries this program needs.

local mailServerId, chatServerId, arcadeServerId, adminServerId = nil, nil, nil, nil
local username = nil
local nickname = nil
local unreadCount = 0
local isAdmin = false
local crypto -- This will hold our crypto library once it's loaded.

--==============================================================================
-- UI & Theme
--==============================================================================

local hasColor = term.isColor and term.isColor()
local function safeColor(colorName, fallbackColor)
    if hasColor and colors[colorName] ~= nil then
        return colors[colorName]
    end
    return fallbackColor
end

local theme = {
    bg = safeColor("black", colors.black),
    text = safeColor("white", colors.white),
    windowBg = safeColor("darkGray", colors.gray),
    border = safeColor("lightGray", colors.white),
    title = safeColor("green", colors.lime),
    prompt = safeColor("cyan", colors.cyan),
    highlightBg = safeColor("blue", colors.blue),
    highlightText = safeColor("white", colors.white),
    statusBarBg = safeColor("gray", colors.lightGray),
    statusBarText = safeColor("white", colors.white),
}

--==============================================================================
-- Core Utility & UI Functions (Formatted)
--==============================================================================

local function getSafeSize()
    local w, h = term.getSize()
    while not w or not h do
        sleep(0.05)
        w, h = term.getSize()
    end
    return w, h
end

local function wordWrap(text, width)
    local finalLines = {}
    for line in string.gmatch(text, "[^\r\n]+") do
        while #line > width do
            local space = line:sub(1, width + 1):match(".+ ")
            local len = space and #space or width
            table.insert(finalLines, line:sub(1, len - 1))
            line = line:sub(len):match("^%s*(.*)")
        end
        table.insert(finalLines, line)
    end
    return finalLines
end

local function clear()
    term.setBackgroundColor(theme.bg)
    term.clear()
    term.setCursorPos(1, 1)
end

local function drawWindow(title)
    clear()
    local w, h = getSafeSize()
    term.setBackgroundColor(theme.windowBg)
    for y = 1, h - 1 do
        term.setCursorPos(1, y)
        term.write(string.rep(" ", w))
    end

    term.setBackgroundColor(theme.title)
    term.setCursorPos(1, 1)
    term.write(string.rep(" ", w))
    term.setTextColor(colors.white)
    local titleText = " " .. title .. " "
    term.setCursorPos(math.floor((w - #titleText) / 2) + 1, 1)
    term.write(titleText)
    
    term.setBackgroundColor(theme.statusBarBg)
    term.setTextColor(theme.statusBarText)
    term.setCursorPos(1, h)
    term.write(string.rep(" ", w))
    local userText = "User: " .. (nickname or "Guest") .. (isAdmin and " (Admin)" or "")
    local versionText = "v" .. currentVersion
    
    if w < 35 then
        local statusText = userText .. " | " .. versionText
        term.setCursorPos(math.floor((w - #statusText) / 2) + 1, h)
        term.write(statusText)
    else
        local helpText = "See 'Help' Menu for Controls"
        term.setCursorPos(2, h)
        term.write(userText)
        term.setCursorPos(w - #versionText, h)
        term.write(versionText)
        term.setCursorPos(math.floor((w - #helpText) / 2) + 1, h)
        term.write(helpText)
    end

    term.setBackgroundColor(theme.windowBg)
    term.setTextColor(theme.text)
end

local function drawMenu(options, selectedIndex, startX, startY)
    for i, option in ipairs(options) do
        local text = option
        if option == "View Inbox" and unreadCount > 0 then
            text = text .. " [" .. unreadCount .. "]"
        end
        term.setCursorPos(startX, startY + i - 1)
        if i == selectedIndex then
            term.setBackgroundColor(theme.highlightBg)
            term.setTextColor(theme.highlightText)
            term.write("> " .. text .. string.rep(" ", 25 - #text))
        else
            term.setBackgroundColor(theme.windowBg)
            term.setTextColor(theme.text)
            term.write("  " .. text .. string.rep(" ", 25 - #text))
        end
    end
    term.setBackgroundColor(theme.windowBg)
end

local function showMessage(title, message)
    drawWindow(title)
    local w, h = getSafeSize()
    local lines = wordWrap(message, w - 4)
    for i, line in ipairs(lines) do
        term.setCursorPos(3, 4 + i - 1)
        term.write(line)
    end
    term.setCursorPos(3, 4 + #lines + 1)
    term.setTextColor(theme.prompt)
    term.write("Press any key to continue...")
    os.pullEvent("key")
    term.setTextColor(theme.text)
end

local function readInput(prompt, y, hideText)
    local x = 2
    term.setTextColor(theme.prompt)
    term.setCursorPos(x, y)
    term.write(prompt)
    term.setTextColor(theme.text)
    term.setCursorPos(x + #prompt, y)
    term.setCursorBlink(true)
    local input = hideText and read("*") or read()
    term.setCursorBlink(false)
    return input
end

--==============================================================================
-- Installation & Update Functions
--==============================================================================

local function findServers()
    drawWindow("Connecting")
    term.setCursorPos(2, 4)
    term.write("Searching for servers...")

    mailServerId = rednet.lookup("SimpleMail", "mail.server")
    chatServerId = rednet.lookup("SimpleChat", "chat.server")
    arcadeServerId = rednet.lookup("ArcadeGames", "arcade.server")
    adminServerId = rednet.lookup("Drunken_Admin", "admin.server")

    if not mailServerId or not chatServerId or not arcadeServerId then
        return false, "Could not find all required servers."
    end
    if not adminServerId then
        print("Admin server not found. Admin console disabled.")
    end
    return true
end

local function installDependencies()
    local yPos = 4
    drawWindow("First-Time Setup")
    term.setCursorPos(2, yPos); term.write("Performing first-time setup..."); yPos = yPos + 1

    -- 1. Create the local lib directory if it doesn't exist
    local libDir = fs.combine(programDir, "lib")
    if not fs.exists(libDir) then
        term.setCursorPos(2, yPos); term.write("- Creating local library directory..."); yPos = yPos + 1
        fs.makeDir(libDir)
    end

    -- 2. Check and download all required libraries
    for _, libName in ipairs(REQUIRED_LIBS) do
        local libPath = fs.combine(libDir, libName .. ".lua")
        if not fs.exists(libPath) then
            term.setCursorPos(2, yPos); term.write("- Downloading required library: " .. libName); yPos = yPos + 1
            
            -- The path we request from the server is just "lib/name.lua"
            local serverPath = "lib/" .. libName .. ".lua"
            rednet.send(mailServerId, { type = "get_library", path = serverPath }, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 10)

            if response and response.code then
                local file = fs.open(libPath, "w")
                if file then
                    file.write(response.code)
                    file.close()
                else
                    showMessage("Installation Error", "Could not write to file system. Check computer permissions.")
                    return false
                end
            else
                showMessage("Installation Error", "Failed to download '"..libName.."' from server.")
                return false
            end
        end
    end

    -- 3. Load the libraries now that they are installed
    local ok, lib = pcall(require, "lib.sha1_hmac")
    if ok then
        crypto = lib
    else
        showMessage("Installation Error", "Failed to load a critical library. The program cannot continue.")
        return false
    end
    
    term.setCursorPos(2, yPos); term.write("Setup complete!"); yPos = yPos + 1
    sleep(1.5)
    return true
end

local function autoUpdateCheck()
    drawWindow("Updater")
    term.setCursorPos(2, 4)
    term.write("Checking for client updates...")
    rednet.send(mailServerId, {type = "get_version", program = programName}, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 3)
    
    if response and response.version and response.version > currentVersion then
        term.setCursorPos(2, 6); term.write("Update found! v"..response.version.." is available.")
        term.setCursorPos(2, 7); term.write("Downloading...")
        rednet.send(mailServerId, {type = "get_update", program = programName}, "SimpleMail")
        local _, update = rednet.receive("SimpleMail", 10)
        
        if update and update.code then
            local savePath = shell.getRunningProgram()
            local file = fs.open(savePath, "w")
            if not file then
                showMessage("Update Error", "Could not open file for writing.")
                return false
            end
            file.write(update.code)
            file.close()
            
            term.setCursorPos(2, 9); term.write("Update complete! Restarting...")
            sleep(2)
            shell.run(savePath)
            return true -- The script will exit and restart here
        else
            showMessage("Error", "Update download failed.")
        end
    end
    return false
end

--==============================================================================
-- Application Screens (Redacted for brevity, unchanged)
--==============================================================================
local function readMail(mail)
    -- Redacted
end

local function viewInbox()
    -- Redacted
end

local function composeAndSend(to, subject, attachment)
    -- Redacted
end

local function sendMail()
    -- Redacted
end

local function sendFile()
    -- Redacted
end

local function manageLists()
    -- Redacted
end

local function startChat()
    -- Redacted
end

local function sendFeedback()
    -- Redacted
end

local function adminConsole()
    -- Redacted
end

local function settingsMenu()
    showMessage("Settings", "This feature is coming soon!")
    return false -- Don't log out
end

local function enterArcade()
    showMessage("Arcade", "This feature is coming soon!")
end

local function showHelpScreen()
    -- Redacted
end

--==============================================================================
-- Login & Main Menu Logic (Unchanged)
--==============================================================================

local function completeAuthentication(user)
    drawWindow("Authentication Required")
    local w, h = getSafeSize()
    local message = "A token has been sent to the Auth Server admin. Please ask them for your token and enter it below."
    local lines = wordWrap(message, w - 4); for i, line in ipairs(lines) do term.setCursorPos(3, 4 + i - 1); term.write(line) end
    
    local token_raw = readInput("Auth Token: ", 4 + #lines + 2, false)
    if not token_raw or token_raw == "" then showMessage("Cancelled", "Authentication cancelled."); return false end

    local token_clean = token_raw:gsub("%s+", "")
    drawWindow("Verifying Token...")
    rednet.send(mailServerId, { type = "submit_auth_token", user = user, token = token_clean }, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 10)

    if response and response.success then
        username = user; nickname = response.nickname; unreadCount = response.unreadCount or 0; isAdmin = response.isAdmin or false
        if response.session_token then local file = fs.open(SESSION_FILE, "w"); if file then file.write(response.session_token); file.close() end end
        showMessage("Success", "Authentication successful!"); return true
    else
        showMessage("Authentication Failed", response.reason or "No response from server."); return false
    end
end

local function loginOrRegister()
    local options = {"Login", "Register", "Exit"}; local selected = 1
    while not username do
        drawWindow("Welcome"); drawMenu(options, selected, 2, 5)
        local event, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then -- Login
                drawWindow("Login"); local user = readInput("Username: ", 5, false)
                if user and user ~= "" then
                    local pass = readInput("Password: ", 7, true)
                    if pass and pass ~= "" then
                        local session_token = nil; if fs.exists(SESSION_FILE) then local file = fs.open(SESSION_FILE, "r"); if file then session_token = file.readAll(); file.close() end end
                        rednet.send(mailServerId, { type = "login", user = user, pass = pass, session_token = session_token }, "SimpleMail")
                        local _, response = rednet.receive("SimpleMail", 10)
                        if response and response.success then
                            if response.needs_auth then
                                if not completeAuthentication(user) then username = nil end
                            else
                                username = user; nickname = response.nickname; unreadCount = response.unreadCount or 0; isAdmin = response.isAdmin or false
                            end
                        else showMessage("Login Failed", response.reason or "No response.") end
                    end
                end
            elseif selected == 2 then -- Register
                drawWindow("Register"); local user = readInput("Choose Username: ", 5, false)
                if user and user ~= "" then
                    local nick = readInput("Choose Nickname: ", 7, false)
                    if nick and nick ~= "" then
                        local pass = readInput("Choose Password: ", 9, true)
                        if pass and pass ~= "" then
                            rednet.send(mailServerId, { type = "register", user = user, pass = pass, nickname = nick }, "SimpleMail")
                            local _, response = rednet.receive("SimpleMail", 5)
                            if response and response.success and response.needs_auth then
                                if not completeAuthentication(user) then username = nil end
                            else showMessage("Registration Failed", response.reason or "No response.") end
                        end
                    end
                end
            elseif selected == 3 then return false end
        elseif key == keys.tab then return false end
    end
    return true
end

local function mainMenu()
    local options = {"View Inbox", "Send Mail", "Send File", "Manage Lists", "General Chat", "Play Games", "Send Feedback"}
    if isAdmin and adminServerId then table.insert(options, "Admin Console") end
    table.insert(options, "Settings"); table.insert(options, "Help"); table.insert(options, "Exit")

    local selected = 1; local pollTimer = os.startTimer(10); local needsRedraw = true
    
    local ok, err = pcall(function() rednet.unhost("SimpleMail"); rednet.host("SimpleMail", "client." .. username) end)
    if not ok then showMessage("Login Error", "This user is already logged in elsewhere."); username = nil; return end

    while true do
        if needsRedraw then drawWindow("Main Menu"); drawMenu(options, selected, 2, 3); needsRedraw = false end
        local event, p1, p2, p3 = os.pullEvent("key", "timer", "rednet_message", "terminate")
        if event == "key" then
            if p1 == keys.up then selected = (selected == 1) and #options or selected - 1
            elseif p1 == keys.down then selected = (selected == #options) and 1 or selected + 1
            elseif p1 == keys.enter then
                local action = options[selected]
                if action == "View Inbox" then viewInbox()
                elseif action == "Send Mail" then sendMail()
                elseif action == "Send File" then sendFile()
                elseif action == "Manage Lists" then manageLists()
                elseif action == "General Chat" then startChat()
                elseif action == "Play Games" then enterArcade()
                elseif action == "Send Feedback" then sendFeedback()
                elseif action == "Admin Console" then adminConsole()
                elseif action == "Settings" then if settingsMenu() then return end
                elseif action == "Help" then showHelpScreen()
                elseif action == "Exit" then return end
                needsRedraw = true
            elseif p1 == keys.tab then return end
            needsRedraw = true
        elseif event == "timer" and p1 == pollTimer then
            rednet.send(mailServerId, {type = "get_unread_count", user = username}, "SimpleMail"); pollTimer = os.startTimer(10)
        elseif event == "rednet_message" and p3 == "SimpleMail" then
            if p2.type == "broadcast" then showMessage("Broadcast", p2.text); needsRedraw = true
            elseif p2.type == "unread_count_response" and p2.count ~= unreadCount then unreadCount = p2.count; needsRedraw = true end
        elseif event == "terminate" then return end
    end
end

--==============================================================================
-- Program Entry Point
--==============================================================================

local function showSplashScreen()
    clear(); term.setTextColor(colors.orange)
    local w,h=getSafeSize(); local art={"         . .        ","       .. . *.      ","- -_ _-__-0oOo      "," _-_ -__ -||||)     ","    ______||||______","~~~~~~~~~~`\"\"'~   "}; local t="Drunken Beard OS"
    local sy=math.floor(h/2)-math.floor(#art/2)-2; for i,l in ipairs(art) do term.setCursorPos(math.floor(w/2-#l/2),sy+i);term.write(l) end
    term.setCursorPos(math.floor(w/2-#t/2),sy+#art+2); term.write(t); sleep(1.5)
end

local function main()
    showSplashScreen()
    while true do
        rednet.open("back")
        local connected, reason = findServers()
        if not connected then
            showMessage("Connection Error", reason or "Could not find servers. Retrying...", true)
            sleep(5)
        else
            if autoUpdateCheck() then return end
            
            if not installDependencies() then
                rednet.close("back"); sleep(5); os.reboot(); return
            end
            
            username = nil
            isAdmin = false
            if not loginOrRegister() then
                clear(); print("Goodbye!"); break
            end
            
            rednet.send(mailServerId, {type = "get_motd"}, "SimpleMail")
            local _, response = rednet.receive("SimpleMail", 3)
            if response and response.motd and response.motd ~= "" then
                showMessage("Message of the Day", response.motd)
            end
            
            mainMenu()
            
            rednet.close("back")
            if not username then
                clear(); print("Goodbye!"); break
            end
        end
    end
end

main()

