--[[
    SimpleMail & Chat Client (v10.2 - Functional Menus)
    by Gemini Gem

    Purpose:
    This version fully implements the previously placeholder functions for
    the "Play Games", "Settings", and "Help" menu options, restoring full
    client functionality with the separated Mainframe/Bank server architecture.

    Key Changes:
    - Implemented the 'enterArcade' function to fetch a game list from the
      Mainframe, allow user selection, and download/run the chosen game.
    - Implemented the 'settingsMenu' to allow users to change their nickname.
    - Implemented a basic 'showHelpScreen'.
    - Fixed a bug where exiting sub-menus would exit the program instead of
      returning to the main menu.
]]

--==============================================================================
-- API & Library Initialization
--==============================================================================
local sha1 = require("apis/sha1_hmac")

--==============================================================================
-- Configuration & State
--==============================================================================

local currentVersion = 10.2
local programName = "mail"
local SESSION_FILE = ".session"

local mailServerId, chatServerId, arcadeServerId, adminServerId = nil, nil, nil, nil
local username = nil
local nickname = nil
local unreadCount = 0
local isAdmin = false

local hasColor = term.isColor and term.isColor()
local function safeColor(colorName, fallbackColor)
    if hasColor and colors[colorName] ~= nil then return colors[colorName] end
    return fallbackColor
end

local theme = {
    bg = safeColor("black", colors.black),
    text = safeColor("white", colors.white),
    windowBg = safeColor("darkGray", colors.gray),
    border = safeColor("lightGray", colors.white),
    title = safeColor("green", colors.lime),
    prompt = safeColor("cyan", colors.cyan),
    highlightBg = safeColor("blue", colors.blue),
    highlightText = safeColor("white", colors.white),
    statusBarBg = safeColor("gray", colors.lightGray),
    statusBarText = safeColor("white", colors.white),
}

--==============================================================================
-- Core Utility & UI Functions
--==============================================================================
-- ... (These utility functions remain unchanged)
local function getSafeSize() local w, h = term.getSize(); while not w or not h do sleep(0.05); w, h = term.getSize() end; return w, h end
local function wordWrap(text, width)
    local finalLines = {}
    for line in string.gmatch(text, "[^\n]+") do
        if #line <= width then
            table.insert(finalLines, line)
        else
            local currentWrappedLine = ""
            for word in string.gmatch(line, "[^%s]+") do
                if #currentWrappedLine + #word + 1 > width then
                    table.insert(finalLines, currentWrappedLine)
                    currentWrappedLine = word
                else
                    currentWrappedLine = currentWrappedLine == "" and word or (currentWrappedLine .. " " .. word)
                end
            end
            table.insert(finalLines, currentWrappedLine)
        end
    end
    return finalLines
end
local function clear() term.setBackgroundColor(theme.bg); term.clear(); term.setCursorPos(1, 1) end

local function drawWindow(title)
    clear()
    local w, h = getSafeSize()
    term.setBackgroundColor(theme.windowBg); for y = 1, h - 1 do term.setCursorPos(1, y); term.write(string.rep(" ", w)) end
    term.setBackgroundColor(theme.title); term.setCursorPos(1, 1); term.write(string.rep(" ", w)); term.setTextColor(colors.white)
    local titleText = " " .. title .. " "; term.setCursorPos(math.floor((w - #titleText) / 2) + 1, 1); term.write(titleText)
    
    term.setBackgroundColor(theme.statusBarBg); term.setTextColor(theme.statusBarText); term.setCursorPos(1, h); term.write(string.rep(" ", w))
    local userText = "User: " .. (nickname or "Guest") .. (isAdmin and " (Admin)" or "")
    local versionText = "v" .. currentVersion
    
    if w < 35 then
        local statusText = userText .. " | " .. versionText
        term.setCursorPos(math.floor((w - #statusText) / 2) + 1, h)
        term.write(statusText)
    else
        local helpText = "See 'Help' Menu for Controls"
        term.setCursorPos(2, h); term.write(userText)
        term.setCursorPos(w - #versionText, h); term.write(versionText)
        term.setCursorPos(math.floor((w - #helpText) / 2) + 1, h); term.write(helpText)
    end

    term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text)
end

local function drawMenu(options, selectedIndex, startX, startY)
    for i, option in ipairs(options) do
        local text = option
        if option == "View Inbox" and unreadCount > 0 then text = text .. " [" .. unreadCount .. "]" end
        term.setCursorPos(startX, startY + i - 1)
        if i == selectedIndex then
            term.setBackgroundColor(theme.highlightBg); term.setTextColor(theme.highlightText)
            term.write("> " .. text .. string.rep(" ", 25 - #text))
        else
            term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text)
            term.write("  " .. text .. string.rep(" ", 25 - #text))
        end
    end
    term.setBackgroundColor(theme.windowBg)
end
local function showMessage(title, message) drawWindow(title); local w, h = getSafeSize(); local lines = wordWrap(message, w - 4); for i, line in ipairs(lines) do term.setCursorPos(3, 4 + i - 1); term.write(line) end; term.setCursorPos(3, 4 + #lines + 1); term.setTextColor(theme.prompt); term.write("Press any key to continue..."); os.pullEvent("key"); term.setTextColor(theme.text) end
local function readInput(prompt, y, hideText)
    local x = 2; term.setTextColor(theme.prompt); term.setCursorPos(x, y); term.write(prompt); term.setTextColor(theme.text)
    term.setCursorPos(x + #prompt, y); term.setCursorBlink(true)
    local input = hideText and read("*") or read()
    term.setCursorBlink(false); return input
end

--==============================================================================
-- Network & Helper Functions
--==============================================================================
-- ... (These functions remain unchanged)
local function findServers()
    drawWindow("Connecting"); term.setCursorPos(2, 4); term.write("Searching for servers...")
    mailServerId = rednet.lookup("SimpleMail", "mail.server")
    chatServerId = rednet.lookup("SimpleChat", "chat.server")
    arcadeServerId = rednet.lookup("ArcadeGames", "arcade.server")
    adminServerId = rednet.lookup("Drunken_Admin", "admin.server")
    if not mailServerId or not chatServerId or not arcadeServerId then
        return false, "Could not locate all required servers."
    end
    return true
end

local function autoUpdateCheck()
    drawWindow("Updater"); term.setCursorPos(2, 4); term.write("Checking for client updates...")
    rednet.send(mailServerId, {type = "get_version", program = programName}, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 3)
    
    if response and response.version and response.version > currentVersion then
        term.setCursorPos(2, 6); term.write("Update found! v"..response.version.." is available."); term.setCursorPos(2, 7); term.write("Downloading...")
        rednet.send(mailServerId, {type = "get_update", program = programName}, "SimpleMail")
        local _, update = rednet.receive("SimpleMail", 10)
        
        if update and update.code then
            local savePath = shell.getRunningProgram()
            local file = fs.open(savePath, "w")
            if not file then
                showMessage("Update Error", "Could not open file for writing.")
                return false
            end
            file.write(update.code)
            file.close()
            
            term.setCursorPos(2, 9); term.write("Update complete! Restarting...")
            sleep(2)
            shell.run(savePath)
            return true
        else
            showMessage("Error", "Update download failed.")
        end
    end
    return false
end

--==============================================================================
-- Application Screens
--==============================================================================
-- ... (Mail, chat, and admin screens remain unchanged)
local function readMail(mail)
    local w, h = getSafeSize(); local bodyLines = wordWrap(mail.body, w - 3); local scroll = 1
    while true do
        drawWindow("Read Mail"); local y = 3
        term.setCursorPos(2, y); term.write("From:    " .. mail.from_nickname); term.setCursorPos(2, y+1); term.write("To:      " .. mail.to); term.setCursorPos(2, y+2); term.write("Subject: " .. mail.subject)
        term.setCursorPos(2, y+4); term.write(string.rep("-", w - 2)); y = y + 5
        local bodyDisplayHeight = h - y - (mail.attachment and 6 or 2)
        for i = 1, bodyDisplayHeight do
            local lineIndex = scroll + i - 1
            if lineIndex <= #bodyLines then term.setCursorPos(2, y + i - 1); term.write(bodyLines[lineIndex]) end
        end
        y = y + bodyDisplayHeight + 1
        if mail.attachment then
            term.setCursorPos(2, y); term.write(string.rep("-", w - 2)); y = y + 1
            term.setCursorPos(2, y); term.write("Attachment: " .. mail.attachment.name); y = y + 2
            term.setTextColor(theme.prompt); term.setCursorPos(2, y); term.write("Save this file? (Y/N)")
        else
            term.setTextColor(theme.prompt); term.setCursorPos(2, h - 2); term.write("Press TAB to return...")
        end
        local event, key = os.pullEvent("key")
        if key == keys.up then scroll = math.max(1, scroll - 1)
        elseif key == keys.down then scroll = math.min(math.max(1, #bodyLines - bodyDisplayHeight + 1), scroll + 1)
        elseif key == keys.tab or key == keys.q then break
        elseif mail.attachment and key == keys.y then
            local saveName = mail.attachment.name
            if fs.exists(saveName) then
                drawWindow("Confirm Overwrite")
                local message = "File '"..saveName.."' already exists."; local lines = wordWrap(message, w - 4)
                for i, line in ipairs(lines) do term.setCursorPos(3, 4 + i - 1); term.write(line) end
                local overwrite = readInput("Overwrite? (y/n): ", 4 + #lines + 1)
                if not overwrite or string.lower(overwrite) ~= "y" then showMessage("Cancelled", "Save operation cancelled."); break end
            end
            local file = fs.open(saveName, "w")
            if file then file.write(mail.attachment.content); file.close(); showMessage("Success", "File saved as '"..saveName.."'")
            else showMessage("Error", "Could not open file for writing.") end
            break
        elseif mail.attachment and key == keys.n then showMessage("Cancelled", "Save operation cancelled."); break end
    end
end
local function viewInbox()
    unreadCount = 0
    drawWindow("Inbox"); term.setCursorPos(2, 4); term.write("Fetching mail..."); rednet.send(mailServerId, { type = "fetch", user = username }, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 10)
    if not response or not response.mail then showMessage("Error", "Could not retrieve mail."); return end
    local inbox = response.mail; if #inbox == 0 then showMessage("Inbox", "Your inbox is empty."); return end
    table.sort(inbox, function(a, b) return a.timestamp > b.timestamp end); local selected = 1; local scroll = 1
    while true do
        drawWindow("Inbox"); local w, h = getSafeSize(); local listHeight = h - 5
        for i = scroll, math.min(scroll + listHeight - 1, #inbox) do local mail = inbox[i]; local line = string.format("From: %-15s Subject: %s", mail.from_nickname, mail.subject); if mail.attachment then line = line .. " [FILE]" end; term.setCursorPos(2, 2 + (i - scroll) + 1); if i == selected then term.setBackgroundColor(theme.highlightBg); term.setTextColor(theme.highlightText) else term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text) end; term.write(string.sub(line, 1, w - 2)) end
        term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.prompt); local helpText = "ENTER: Read | D/DEL: Delete | Q/TAB: Back"; term.setCursorPos(w - #helpText, h - 2); term.write(helpText)
        local event, key = os.pullEvent("key"); if key == keys.up then selected = math.max(1, selected - 1); if selected < scroll then scroll = selected end elseif key == keys.down then selected = math.min(#inbox, selected + 1); if selected >= scroll + listHeight then scroll = selected - listHeight + 1 end elseif key == keys.enter then readMail(inbox[selected]) elseif key == keys.delete or key == keys.d then rednet.send(mailServerId, {type = "delete", user = username, id = inbox[selected].id}, "SimpleMail"); table.remove(inbox, selected); if #inbox == 0 then break end; selected = math.max(1, math.min(selected, #inbox)) elseif key == keys.tab or key == keys.q then break end
    end
end
local function composeAndSend(to, subject, attachment)
    drawWindow("Compose Mail Body")
    local w, h = getSafeSize(); local helpText = "ENTER on empty line to send"
    term.setBackgroundColor(theme.statusBarBg); term.setTextColor(theme.statusBarText); term.setCursorPos(w - #helpText, h); term.write(helpText)
    term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.prompt); term.setCursorPos(2, 4); term.write("Enter message body (optional for files)."); term.setTextColor(theme.text)
    local bodyLines = {}; local y = 6
    while y < h - 2 do
        term.setCursorPos(2, y); term.setCursorBlink(true)
        local line = read(); term.setCursorBlink(false)
        if line == "" then break end
        table.insert(bodyLines, line); y = y + 1
    end
    local body = table.concat(bodyLines, "\n")
    local mail = { from = username, from_nickname = nickname, to = to, subject = subject, body = body, timestamp = os.time(), attachment = attachment }
    rednet.send(mailServerId, { type = "send", mail = mail }, "SimpleMail"); drawWindow("Sending..."); term.setCursorPos(2, 4); term.write("Sending mail...")
    local _, confirm = rednet.receive("SimpleMail", 10)
    if confirm and confirm.status then showMessage("Success", confirm.status) else showMessage("Error", "No response from server.") end
end
local function sendMail()
    drawWindow("Compose Mail"); local to = readInput("To: ", 4)
    if not to or to == "" then return end
    rednet.send(mailServerId, { type = "user_exists", user = to }, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 3)
    if not response or not response.exists then showMessage("Error", "Recipient '"..to.."' not found."); return end
    local subject = readInput("Subject: ", 6); if not subject then subject = "(No Subject)" end
    composeAndSend(to, subject, nil)
end
local function sendFile()
    drawWindow("Send File"); local fileName = readInput("File to send: ", 4)
    if not fileName or fileName == "" then return end
    if not fs.exists(fileName) then showMessage("Error", "File not found."); return end
    local to = readInput("To: ", 6)
    if not to or to == "" then return end
    rednet.send(mailServerId, { type = "user_exists", user = to }, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 3)
    if not response or not response.exists then showMessage("Error", "Recipient '"..to.."' not found."); return end
    local subject = readInput("Subject: ", 8); if not subject then subject = "(No Subject)" end
    local file = fs.open(fileName, "r"); if not file then showMessage("Error", "Could not open file."); return end
    local content = file.readAll(); file.close()
    local attachment = { name = fs.getName(fileName), content = content }
    composeAndSend(to, subject, attachment)
end
local function manageLists()
    local options = {"View All Lists", "Create a List", "Join a List", "Back"}; local selected = 1
    while true do
        drawWindow("Mailing Lists"); drawMenu(options, selected, 2, 4)
        local event, key = os.pullEvent("key"); if key == keys.up then selected = (selected == 1) and #options or selected - 1 elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then
                drawWindow("All Lists"); term.setCursorPos(2, 4); term.write("Fetching lists..."); rednet.send(mailServerId, { type = "get_lists" }, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 5)
                if response and response.lists then
                    drawWindow("All Lists"); local listTable = {}; for name, members in pairs(response.lists) do table.insert(listTable, {name = name, members = #members}) end
                    if #listTable == 0 then showMessage("All Lists", "There are no mailing lists.")
                    else local y = 4; for _, listData in ipairs(listTable) do term.setCursorPos(2, y); term.write(string.format("@%s (%d members)", listData.name, listData.members)); y = y + 1 end; term.setCursorPos(2, y + 1); term.setTextColor(theme.prompt); term.write("Press any key to continue..."); os.pullEvent("key") end
                else showMessage("Error", "Could not fetch lists.") end
            elseif selected == 2 then
                drawWindow("Create List"); local name = readInput("New list name: @", 4)
                if name and name ~= "" then rednet.send(mailServerId, { type = "create_list", name = name, creator = username }, "SimpleMail"); local _, r = rednet.receive("SimpleMail", 5); if r and r.status then showMessage("Server Response", r.status) else showMessage("Error", "No response.") end end
            elseif selected == 3 then
                drawWindow("Join List"); local name = readInput("List to join: @", 4)
                if name and name ~= "" then rednet.send(mailServerId, { type = "join_list", name = name, user = username }, "SimpleMail"); local _, r = rednet.receive("SimpleMail", 5); if r and r.status then showMessage("Server Response", r.status) else showMessage("Error", "No response.") end end
            elseif selected == 4 then break end
        elseif key == keys.tab or key == keys.q then break end
    end
end
local function startChat()
    drawWindow("General Chat"); term.setCursorPos(2, 4); term.write("Fetching history..."); rednet.send(mailServerId, {type = "get_chat_history"}, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 5)
    local history = (response and response.history) or {}; local input = ""; local lastMessage = ""
    local function redrawAll()
        drawWindow("General Chat"); local w, h = getSafeSize(); local line_y = h - 3
        for i = #history, 1, -1 do
            local wrapped = wordWrap(history[i], w - 2)
            for j = #wrapped, 1, -1 do if line_y < 2 then break end; term.setCursorPos(2, line_y); term.write(wrapped[j]); line_y = line_y - 1 end
            if line_y < 2 then break end
        end
        local inputWidth = w - 4; term.setBackgroundColor(theme.windowBg); term.setCursorPos(1, h - 2); term.write(string.rep(" ", w)); term.setCursorPos(2, h - 2); term.setTextColor(theme.prompt); term.write("> "); term.setTextColor(theme.text)
        local textToDraw = #input > inputWidth and string.sub(input, -inputWidth) or input; term.write(textToDraw)
    end
    local function redrawInputLineOnly()
        local w, h = getSafeSize(); local inputWidth = w - 4; term.setBackgroundColor(theme.windowBg); term.setCursorPos(1, h - 2); term.write(string.rep(" ", w)); term.setCursorPos(2, h - 2); term.setTextColor(theme.prompt); term.write("> "); term.setTextColor(theme.text)
        local textToDraw = #input > inputWidth and string.sub(input, -inputWidth) or input; term.write(textToDraw)
    end
    local function networkListener()
        while true do
            local _, message = rednet.receive("SimpleChat")
            local formattedMessage = string.format("[%s]: %s", message.from, message.text)
            if formattedMessage ~= lastMessage then table.insert(history, formattedMessage); if #history > 100 then table.remove(history, 1) end; redrawAll() end
        end
    end
    local function keyboardListener()
        while true do
            local event, p1 = os.pullEvent()
            if event == "key" then
                if p1 == keys.tab then break
                elseif p1 == keys.backspace then if #input > 0 then input = string.sub(input, 1, -2); redrawInputLineOnly() end
                elseif p1 == keys.enter then
                    if input ~= "" then
                        local messageToSend = { from = username, text = input }; rednet.send(chatServerId, messageToSend, "SimpleChat")
                        lastMessage = string.format("[%s]: %s", nickname, messageToSend.text)
                        table.insert(history, lastMessage); if #history > 100 then table.remove(history, 1) end
                        input = ""; redrawAll()
                    end
                end
            elseif event == "char" then input = input .. p1; redrawInputLineOnly()
            elseif event == "terminate" then break end
        end
    end
    redrawAll(); parallel.waitForAny(keyboardListener, networkListener)
end

local function sendFeedback()
    drawWindow("Send Feedback to Admin")
    local subject = readInput("Subject: ", 4)
    if not subject or subject == "" then return end
    composeAndSend("MuhendizBey", "Feedback: " .. subject, nil)
end

local function adminConsole()
    if not adminServerId then
        showMessage("Error", "Admin server could not be located.")
        return
    end
    local w, h = getSafeSize()
    drawWindow("Remote Admin Console")
    local history = {}
    local input = ""

    local function redrawConsole()
        drawWindow("Remote Admin Console")
        local historyLines = {}
        for _, item in ipairs(history) do
            local prefix = item.type == "cmd" and "> " or ""
            for _, line in ipairs(wordWrap(prefix .. item.text, w - 2)) do
                table.insert(historyLines, line)
            end
        end

        local displayHeight = h - 3
        local startLine = math.max(1, #historyLines - displayHeight + 1)
        for i = startLine, #historyLines do
            term.setCursorPos(2, 2 + (i - startLine))
            term.write(historyLines[i])
        end
    end

    local function redrawInputLine()
        local inputWidth = w - 4
        term.setBackgroundColor(theme.windowBg)
        term.setCursorPos(1, h - 1)
        term.clearLine()
        term.setCursorPos(2, h - 1)
        term.setTextColor(theme.prompt)
        term.write("> ")
        term.setTextColor(theme.text)
        
        local textToDraw = #input > inputWidth and "..." .. string.sub(input, -inputWidth + 3) or input
        term.write(textToDraw)
    end
    
    redrawConsole()
    while true do
        redrawInputLine()
        term.setCursorBlink(true)

        local event, p1 = os.pullEvent()
        term.setCursorBlink(false)

        if event == "key" then
            if p1 == keys.enter then
                if input == "exit" or input == "quit" then break end
                if input == "clear" then
                    history = {}
                elseif input ~= "" then
                    table.insert(history, {type="cmd", text=input})
                    rednet.send(adminServerId, {
                        type = "execute_command",
                        user = username,
                        command = input
                    }, "Drunken_Admin")
                    
                    redrawConsole()
                    term.setCursorPos(1, h-1)
                    term.clearLine()
                    term.setCursorPos(2, h-1)
                    term.write("Executing...")

                    local _, response = rednet.receive("Drunken_Admin", 10)
                    if response and response.output then
                        table.insert(history, {type="resp", text=response.output})
                    else
                        table.insert(history, {type="resp", text="Error: Timed out or no response from server."})
                    end
                end
                input = ""
                redrawConsole()
            elseif p1 == keys.backspace then
                input = string.sub(input, 1, -2)
            end
        elseif event == "char" then
            input = input .. p1
        elseif event == "terminate" then
            break
        end
    end
end
-- NEW: Fully implemented functions
local function settingsMenu()
    local options = { "Change Nickname", "Back" }
    local selected = 1
    while true do
        drawWindow("Settings")
        drawMenu(options, selected, 2, 4)
        local ev, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then
                drawWindow("Change Nickname")
                local new_nick = readInput("New Nickname: ", 4)
                if new_nick and new_nick ~= "" then
                    rednet.send(mailServerId, { type = "set_nickname", user = username, new_nickname = new_nick }, "SimpleMail")
                    local _, response = rednet.receive("SimpleMail", 5)
                    if response and response.success then
                        nickname = response.new_nickname
                        showMessage("Success", "Nickname changed successfully.")
                    else
                        showMessage("Error", response and response.reason or "No response from server.")
                    end
                end
                break
            elseif selected == 2 then
                break
            end
        elseif key == keys.tab or key == keys.q then
            break
        end
    end
end

local function enterArcade()
    drawWindow("Arcade"); term.setCursorPos(2, 4); term.write("Fetching game list...")
    rednet.send(mailServerId, { type = "get_gamelist" }, "SimpleMail")
    local _, response = rednet.receive("SimpleMail", 5)
    
    if not response or not response.games or #response.games == 0 then
        showMessage("Arcade", "No games are available on the server.")
        return
    end

    local gameList = response.games
    local options = {}
    for _, game in ipairs(gameList) do table.insert(options, game.name) end
    table.insert(options, "Back")
    
    local selected = 1
    while true do
        drawWindow("Drunken Arcade")
        drawMenu(options, selected, 2, 4)
        
        local ev, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.tab or key == keys.q then break
        elseif key == keys.enter then
            if selected > #gameList then break end -- Back option

            local chosenGame = gameList[selected]
            drawWindow("Downloading..."); term.setCursorPos(2,4); term.write("Downloading " .. chosenGame.name .. "...")
            rednet.send(mailServerId, { type = "get_game_update", filename = chosenGame.file }, "SimpleMail")
            local _, game_response = rednet.receive("SimpleMail", 10)

            if game_response and game_response.code then
                if not fs.isDir("games") then fs.makeDir("games") end
                local path = fs.combine("games", chosenGame.file)
                local file = fs.open(path, "w")
                if file then
                    file.write(game_response.code); file.close()
                    clear(); term.setCursorPos(1,1)
                    local ok, err = pcall(shell.run, path, username, nickname)
                    if not ok then showMessage("Game Error", tostring(err)) end
                else
                    showMessage("Error", "Could not save game file.")
                end
            else
                showMessage("Error", "Failed to download game.")
            end
            -- After a game ends, break back to the main menu
            break
        end
    end
end

local function showHelpScreen()
    drawWindow("Help")
    local helpText = [[
Drunken OS is a multi-purpose client for messaging,
gaming, and more.

Controls:
- Use UP/DOWN arrow keys to navigate menus.
- Use ENTER to select an option.
- Use TAB or Q to go back from most screens.
- In text fields, type and press ENTER to submit.

This client auto-updates when a new version is
available on the server.
]]
    local y = 3
    for line in helpText:gmatch("[^\r\n]+") do
        term.setCursorPos(2, y)
        term.write(line)
        y = y + 1
    end
    term.setCursorPos(2, y + 1); term.setTextColor(theme.prompt)
    term.write("Press any key to return...")
    os.pullEvent("key")
end

--==============================================================================
-- Login & Main Menu
--==============================================================================

local function loginOrRegister()
    local options = {"Login", "Register", "Exit"}; local selected = 1
    while not username do
        drawWindow("Welcome"); drawMenu(options, selected, 2, 5)
        local event, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then -- Login
                drawWindow("Login")
                local user = readInput("Username: ", 5, false)
                if user and user ~= "" then
                    local pass = readInput("Password: ", 7, true)
                    if pass and pass ~= "" then
                        local session_token = nil
                        if fs.exists(SESSION_FILE) then
                            local file = fs.open(SESSION_FILE, "r")
                            if file then session_token = file.readAll(); file.close() end
                        end
                        
                        rednet.send(mailServerId, { type = "login", user = user, pass = pass, session_token = session_token }, "SimpleMail")
                        local _, response = rednet.receive("SimpleMail", 10)

                        if response and response.success then
                            if response.needs_auth then
                                if not completeAuthentication(user) then username = nil end
                            else
                                username = user
                                nickname = response.nickname
                                unreadCount = response.unreadCount or 0
                                isAdmin = response.isAdmin or false
                            end
                        else
                            showMessage("Login Failed", response.reason or "No response.")
                        end
                    end
                end
            elseif selected == 2 then -- Register
                drawWindow("Register")
                local user = readInput("Choose Username: ", 5, false)
                if user and user ~= "" then
                    local nick = readInput("Choose Nickname: ", 7, false)
                    if nick and nick ~= "" then
                        local pass = readInput("Choose Password: ", 9, true)
                        if pass and pass ~= "" then
                            rednet.send(mailServerId, { type = "register", user = user, pass = pass, nickname = nick }, "SimpleMail")
                            local _, response = rednet.receive("SimpleMail", 5)
                            if response and response.success and response.needs_auth then
                                if not completeAuthentication(user) then username = nil end
                            else
                                showMessage("Registration Failed", response.reason or "No response.")
                            end
                        end
                    end
                end
            elseif selected == 3 then return false
            end
        elseif key == keys.tab or key == keys.q then return false
        end
    end
    return true
end

local function mainMenu()
    local options = {"View Inbox", "Send Mail", "Send File", "Manage Lists", "General Chat", "Play Games", "Send Feedback"}
    if isAdmin then
        table.insert(options, "Admin Console")
    end
    table.insert(options, "Settings")
    table.insert(options, "Help")
    table.insert(options, "Exit")

    local selected = 1; local pollTimer = os.startTimer(10); local needsRedraw = true
    
    local ok, err = pcall(function()
        rednet.unhost("SimpleMail"); rednet.host("SimpleMail", "client." .. username)
    end)
    if not ok then
        showMessage("Login Error", "This user is already logged in on another device.")
        username = nil; return
    end

    while true do
        if needsRedraw then drawWindow("Main Menu"); drawMenu(options, selected, 2, 3); needsRedraw = false end
        local event, p1, p2, p3 = os.pullEvent("key", "timer", "rednet_message", "terminate")
        if event == "key" then
            if p1 == keys.up then selected = (selected == 1) and #options or selected - 1
            elseif p1 == keys.down then selected = (selected == #options) and 1 or selected + 1
            elseif p1 == keys.enter then
                local action = options[selected]
                if action == "View Inbox" then viewInbox()
                elseif action == "Send Mail" then sendMail()
                elseif action == "Send File" then sendFile()
                elseif action == "Manage Lists" then manageLists()
                elseif action == "General Chat" then startChat()
                elseif action == "Play Games" then enterArcade()
                elseif action == "Send Feedback" then sendFeedback()
                elseif action == "Admin Console" then adminConsole()
                elseif action == "Settings" then settingsMenu()
                elseif action == "Help" then showHelpScreen()
                elseif action == "Exit" then break end
                needsRedraw = true
            elseif p1 == keys.tab or p1 == keys.q then break end
            needsRedraw = true
        elseif event == "timer" and p1 == pollTimer then
            rednet.send(mailServerId, {type = "get_unread_count", user = username}, "SimpleMail")
            pollTimer = os.startTimer(10)
        elseif event == "rednet_message" then
            if p3 == "SimpleMail" then
                if p2.type == "broadcast" then showMessage("Admin Broadcast", p2.text); needsRedraw = true
                elseif p2.type == "unread_count_response" and p2.count and p2.count ~= unreadCount then
                    unreadCount = p2.count; needsRedraw = true
                end
            end
        elseif event == "terminate" then break end
    end
end

--==============================================================================
-- Program Entry Point
--==============================================================================

local function showSplashScreen()
    clear()
    local w, h = getSafeSize()
    term.setTextColor(colors.orange)
    
    local art = {
    "         . .        ",
    "       .. . *.      ",
    "- -_ _-__-0oOo      ",
    " _-_ -__ -||||)     ",
    "    ______||||______",
    "~~~~~~~~~~`\"\"'~   "
    }
    local title = "Drunken Beard OS"

    local startY = math.floor(h/2) - math.floor(#art/2) - 2
    for i, line in ipairs(art) do
        term.setCursorPos(math.floor(w/2 - #line/2), startY + i)
        term.write(line)
    end
    
    term.setCursorPos(math.floor(w/2 - #title/2), startY + #art + 2)
    term.write(title)
    sleep(1.5)
end

local function main()
    showSplashScreen()
    while true do
        rednet.open("back")
        local connected, reason = findServers()
        if not connected then
            showMessage("Connection Error", reason or "Could not find servers. Retrying in 5 seconds...")
            sleep(5)
        else
            if autoUpdateCheck() then
                return
            end

            username = nil
            isAdmin = false
            if not loginOrRegister() then
                clear(); print("Goodbye!"); break
            end
            
            rednet.send(mailServerId, {type = "get_motd"}, "SimpleMail"); local _, response = rednet.receive("SimpleMail", 3)
            if response and response.motd and response.motd ~= "" then showMessage("Message of the Day", response.motd) end
            
            mainMenu()
            
            -- After mainMenu() ends, logout.
            clear(); print("Goodbye!")
            rednet.close("back")
            sleep(1)
            break
        end
    end
end

main()
