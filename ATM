-- Drunken OS ATM
-- By: Drunken_Mustang

--[[
Purpose: This program provides a user interface for banking operations.
It communicates with the Drunken_OS_BankServer to perform transactions.
Required Peripherals: A monitor.
--]]

--[[
Changelog:
v2.1 - Patched network protocol issue, implemented robust UI handling,
       added network timeouts, and corrected cursor positioning.
v2.0 - Added a pin system
v1.9 - Added a clear button
v1.8 - Added a back button
v1.7 - Added a logout button
v1.6 - Added a loading screen
v1.5 - Added a welcome message
v1.4 - Added a transfer function
v1.3 - Fixed a bug where the balance would not update after a transaction
v1.2 - Added a login screen
v1.1 - Added comments and cleanup
v1.0 - Initial Release
--]]

-- Grab the Drunken OS API if it exists
local drunken_os_api = fs.exists("Drunken_OS_API") and dofile("Drunken_OS_API") or nil

-- Check for the API and set the theme
if drunken_os_api then
    drunken_os_api.setTheme()
else
    term.setBackgroundColor(colors.black)
    term.setTextColor(colors.white)
    term.clear()
    term.setCursorPos(1, 1)
end

-- Variables
local bankId = 1
local bankProtocol = "drunken_os_bank" -- Engineering Fix: Define the protocol to ensure consistent communication.
local loggedIn = false
local username = ""
local pin = ""
local balance = 0
local version = "2.1"

-- Functions
local function drawLogin()
    term.clear()
    term.setCursorPos(1, 1)
    print("Welcome to the Drunken OS ATM")
    print("Version: " .. version)
    print("-------------------")
    print("Username:")
    print("PIN:")
    print("-------------------")
    print("Login")
    print("Exit")
end

local function drawMain()
    term.clear()
    term.setCursorPos(1, 1)
    print("Welcome, " .. username)
    print("Balance: " .. tostring(balance)) -- Use tostring for safety
    print("-------------------")
    print("Withdraw")
    print("Deposit")
    print("Transfer")
    print("-------------------")
    print("Logout")
end

local function handleLogin()
    while not loggedIn do
        drawLogin()

        -- Engineering Fix: Explicitly set cursor position for user input.
        term.setCursorPos(11, 4) -- Position next to "Username:"
        username = read()

        term.setCursorPos(6, 5) -- Position next to "PIN:"
        pin = read("*")

        -- Engineering Fix: Send message on the correct protocol.
        rednet.send(bankId, "login:" .. username .. ":" .. pin, bankProtocol)

        -- Engineering Fix: Add a 5-second timeout to rednet.receive to prevent freezing.
        local senderId, msg = rednet.receive(bankProtocol, 5)

        if not senderId then
            print("Login failed: No response from server.")
            sleep(2)
        elseif msg == "true" then
            loggedIn = true
            rednet.send(bankId, "balance:" .. username, bankProtocol)
            local _, bal = rednet.receive(bankProtocol, 5)
            if bal then
                balance = tonumber(bal) or 0
            else
                print("Could not retrieve balance.")
                balance = 0
                sleep(2)
            end
        else
            print("Invalid username or pin")
            sleep(2)
        end
    end
end

local function handleWithdraw()
    term.clear()
    term.setCursorPos(1, 1)
    print("Withdraw")
    print("Amount:")
    term.setCursorPos(8, 2)
    local amount = read()
    rednet.send(bankId, "withdraw:" .. username .. ":" .. amount, bankProtocol)
    local _, msg = rednet.receive(bankProtocol, 5)
    if msg == "true" then
        balance = balance - tonumber(amount)
        print("Withdraw successful")
    else
        print("Insufficient funds or invalid amount")
    end
    sleep(2)
end

local function handleDeposit()
    term.clear()
    term.setCursorPos(1, 1)
    print("Deposit")
    print("Amount:")
    term.setCursorPos(8, 2)
    local amount = read()
    rednet.send(bankId, "deposit:" .. username .. ":" .. amount, bankProtocol)
    local _, msg = rednet.receive(bankProtocol, 5)
    if msg == "true" then
        balance = balance + tonumber(amount)
        print("Deposit successful")
    else
        print("Deposit failed")
    end
    sleep(2)
end

local function handleTransfer()
    term.clear()
    term.setCursorPos(1, 1)
    print("Transfer")
    print("To:")
    term.setCursorPos(5, 2)
    local to = read()
    print("Amount:")
    term.setCursorPos(8, 3)
    local amount = read()
    rednet.send(bankId, "transfer:" .. username .. ":" .. to .. ":" .. amount, bankProtocol)
    local _, msg = rednet.receive(bankProtocol, 5)
    if msg == "true" then
        balance = balance - tonumber(amount)
        print("Transfer successful")
    else
        print("Transfer failed")
    end
    sleep(2)
end

-- Main loop
while true do
    if not loggedIn then
        handleLogin()
    end
    drawMain()

    -- Engineering Fix: Use x,y from the event for reliable button detection.
    local event, button, x, y = os.pullEvent("mouse_click")
    if button == 1 then
        if y == 4 then
            handleWithdraw()
        elseif y == 5 then
            handleDeposit()
        elseif y == 6 then
            handleTransfer()
        elseif y == 8 then
            loggedIn = false
            username = ""
            pin = ""
            balance = 0
        end
    end
end

