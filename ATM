--[[
    Drunken Beard Bank - ATM Terminal (v4.2 - Finalized Economy & Reliability)
    by Gemini Gem

    Purpose:
    This is the definitive ATM client, fully updated for the new two-server
    Drunken_OS architecture. It communicates exclusively with the dedicated
    Bank Server and features a robust, user-friendly interface for the
    dynamic, multi-currency economy.

    Key Features:
    - Connects only to the secure Bank Server.
    - Handles multi-item deposits and item-specific withdrawals.
    - Fetches and displays live exchange rates.
    - Includes an auto-reboot main loop for maximum uptime.

    Setup:
    - A disk drive must be attached to this computer.
    - A Vault Clerk Turtle must be running nearby and connected to rednet.
    - Set this program as the startup script for the computer.
]]

--==============================================================================
-- Embedded SHA1 Library
--==============================================================================

local sha1 = {}
do
    -- (SHA1 library code remains unchanged)
    local lshift, rshift, bor, band, bxor = bit32.lshift, bit32.rshift, bit32.bor, bit32.band, bit32.bxor
    local function rol(n, c) return bor(lshift(n, c), rshift(n, 32 - c)) end
    local function str_to_bin(str) local t = {}; for i = 1, #str do t[i] = string.byte(str, i) end; return t end
    local function bin_to_hex(bin) local hex = ""; for i = 1, #bin do hex = hex .. string.format("%02x", bin[i]) end; return hex end
    function sha1.hex(s) return bin_to_hex(sha1.bin(s)) end
    function sha1.bin(s)
      local H0, H1, H2, H3, H4 = 0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0
      local str = str_to_bin(s); local len = #str; str[len + 1] = 0x80
      for i = len + 2, (len + 64) - ((len + 8) % 64) do str[i] = 0 end
      local bit_len = len * 8
      for i = 0, 7 do str[#str + 1] = band(rshift(bit_len, (7 - i) * 8), 0xff) end
      for i = 1, #str, 64 do
        local W = {}; for j = 0, 15 do W[j] = bor(lshift(str[i+j*4], 24), lshift(str[i+j*4+1], 16), lshift(str[i+j*4+2], 8), str[i+j*4+3]) end
        for j = 16, 79 do W[j] = rol(bxor(W[j-3], W[j-8], W[j-14], W[j-16]), 1) end
        local a,b,c,d,e = H0,H1,H2,H3,H4
        for j = 0, 79 do
          local f, k
          if j < 20 then f = bxor(d, band(b, bxor(c, d))); k = 0x5A827999
          elseif j < 40 then f = bxor(b, c, d); k = 0x6ED9EBA1
          elseif j < 60 then f = bor(band(b, c), band(b, d), band(c, d)); k = 0x8F1BBCDC
          else f = bxor(b, c, d); k = 0xCA62C1D6 end
          local temp = rol(a, 5) + f + e + W[j] + k; e=d; d=c; c=rol(b, 30); b=a; a=temp
        end
        H0=(H0+a); H1=(H1+b); H2=(H2+c); H3=(H3+d); H4=(H4+e)
      end
      local result = {}; for i=0,3 do result[i+1]=band(rshift(H0,(3-i)*8),0xff) end; for i=0,3 do result[i+5]=band(rshift(H1,(3-i)*8),0xff) end; for i=0,3 do result[i+9]=band(rshift(H2,(3-i)*8),0xff) end; for i=0,3 do result[i+13]=band(rshift(H3,(3-i)*8),0xff) end; for i=0,3 do result[i+17]=band(rshift(H4,(3-i)*8),0xff) end
      return result
    end
end

--==============================================================================
-- Configuration & State
--==============================================================================

local bankServerId = nil
local turtleClerkId = nil
local username = nil
local balance = 0
local currencyRates = {}

-- Rednet protocols
local BANK_PROTOCOL = "DB_Bank"
local TURTLE_CLERK_PROTOCOL = "DB_ATM_Turtle"

--==============================================================================
-- UI & Theme
--==============================================================================

local hasColor = term.isColor and term.isColor()
local function safeColor(colorName, fallbackColor)
    if hasColor and colors[colorName] ~= nil then return colors[colorName] end
    return fallbackColor
end

local theme = {
    bg = safeColor("black", colors.black),
    text = safeColor("white", colors.white),
    windowBg = safeColor("darkGray", colors.gray),
    title = safeColor("lightBlue", colors.lightBlue),
    prompt = safeColor("cyan", colors.cyan),
    highlightBg = safeColor("blue", colors.blue),
    highlightText = safeColor("white", colors.white),
    error = safeColor("red", colors.red),
}

local function getSafeSize() local w, h = term.getSize(); while not w or not h do sleep(0.05); w, h = term.getSize() end; return w, h end
local function wordWrap(text, width)
    local finalLines = {}
    for line in string.gmatch(text, "[^\n]+") do
        if #line <= width then
            table.insert(finalLines, line)
        else
            local currentWrappedLine = ""
            for word in string.gmatch(line, "[^%s]+") do
                if #currentWrappedLine + #word + 1 > width then
                    table.insert(finalLines, currentWrappedLine)
                    currentWrappedLine = word
                else
                    currentWrappedLine = currentWrappedLine == "" and word or (currentWrappedLine .. " " .. word)
                end
            end
            table.insert(finalLines, currentWrappedLine)
        end
    end
    return finalLines
end
local function clear() term.setBackgroundColor(theme.bg); term.clear(); term.setCursorPos(1, 1) end
local function drawWindow(title)
    clear()
    local w, h = getSafeSize()
    term.setBackgroundColor(theme.windowBg); for y = 1, h do term.setCursorPos(1, y); term.write(string.rep(" ", w)) end
    term.setBackgroundColor(theme.title); term.setCursorPos(1, 1); term.write(string.rep(" ", w)); term.setTextColor(colors.white)
    local titleText = " " .. title .. " "; term.setCursorPos(math.floor((w - #titleText) / 2) + 1, 1); term.write(titleText)
    term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text)
end
local function drawMenu(options, selectedIndex, startX, startY)
    for i, option in ipairs(options) do
        term.setCursorPos(startX, startY + i - 1)
        if i == selectedIndex then
            term.setBackgroundColor(theme.highlightBg); term.setTextColor(theme.highlightText)
            term.write("> " .. option)
        else
            term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text)
            term.write("  " .. option)
        end
    end
    term.setBackgroundColor(theme.windowBg)
end
local function showMessage(title, message, isError)
    drawWindow(title)
    local w, h = getSafeSize()
    if isError then term.setTextColor(theme.error) else term.setTextColor(theme.text) end
    local lines = wordWrap(message, w - 4)
    for i, line in ipairs(lines) do term.setCursorPos(3, 4 + i - 1); term.write(line) end
    term.setCursorPos(3, 4 + #lines + 1); term.setTextColor(theme.prompt); term.write("Press any key to continue..."); os.pullEvent("key"); term.setTextColor(theme.text)
end
local function readInput(prompt, y, hideText)
    local x = 2; term.setTextColor(theme.prompt); term.setCursorPos(x, y); term.write(prompt); term.setTextColor(theme.text)
    term.setCursorPos(x + #prompt, y); term.setCursorBlink(true)
    local input = hideText and read("*") or read()
    term.setCursorBlink(false); return input
end

--==============================================================================
-- Banking Functions
--==============================================================================

local function login(user)
    drawWindow("Drunken Beard Bank - Login")
    term.setCursorPos(2, 4); term.write("Card detected for user: " .. user)
    local pass = readInput("Password: ", 6, true)
    if pass and pass ~= "" then
        rednet.send(bankServerId, { type = "login", user = user, pass = pass }, BANK_PROTOCOL)
        local _, response = rednet.receive(BANK_PROTOCOL, 5)
        if response and response.success then
            username = user
            balance = response.balance
            return true
        else
            showMessage("Login Failed", response and response.reason or "No response from server.", true)
            return false
        end
    end
    return false
end

local function deposit()
    drawWindow("Deposit")
    term.setCursorPos(2, 4); term.write("Please place all items for deposit into the barrel.")
    term.setCursorPos(2, 5); term.write("Press ENTER when ready.")
    os.pullEvent("key")

    drawWindow("Processing..."); term.setCursorPos(2, 4); term.write("Contacting vault clerk...")
    rednet.send(turtleClerkId, { type = "request_deposit" }, TURTLE_CLERK_PROTOCOL)
    
    local _, response = rednet.receive(TURTLE_CLERK_PROTOCOL, 10)
    if not response or not response.items then
        showMessage("Error", "No response from vault clerk.", true)
        return
    end

    local depositItems = response.items
    if #depositItems > 0 then
        term.setCursorPos(2, 6); term.write("Clerk found items. Confirming with bank...")
        rednet.send(bankServerId, { type = "deposit", user = username, items = depositItems }, BANK_PROTOCOL)
        local _, server_response = rednet.receive(BANK_PROTOCOL, 5)

        if server_response and server_response.success then
            balance = server_response.newBalance
            rednet.send(turtleClerkId, { type = "confirm_deposit" }, TURTLE_CLERK_PROTOCOL)
            showMessage("Success", "Deposited items for a total of $" .. server_response.deposited_value)
        else
            rednet.send(turtleClerkId, { type = "cancel_deposit" }, TURTLE_CLERK_PROTOCOL)
            showMessage("Error", "Deposit failed on server. Items returned.", true)
        end
    else
        rednet.send(turtleClerkId, { type = "cancel_deposit" }, TURTLE_CLERK_PROTOCOL)
        showMessage("Deposit Cancelled", "No valid currency found in the deposit barrel.")
    end
end

local function withdraw()
    local availableCurrencies = {}
    for name, data in pairs(currencyRates) do
        table.insert(availableCurrencies, { name = name, rate = data.current })
    end
    table.sort(availableCurrencies, function(a, b) return a.name < b.name end)
    
    if #availableCurrencies == 0 then
        showMessage("Withdrawal", "There are no currencies available for withdrawal.")
        return
    end

    local selected = 1
    while true do
        drawWindow("Select Currency to Withdraw")
        term.setCursorPos(2, 4); term.write("Your balance: $" .. balance)
        local menuOptions = {}
        for _, c in ipairs(availableCurrencies) do
            table.insert(menuOptions, string.format("%s ($%d)", c.name, c.rate))
        end
        table.insert(menuOptions, "Cancel")
        drawMenu(menuOptions, selected, 2, 6)

        local event, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #menuOptions or selected - 1
        elseif key == keys.down then selected = (selected == #menuOptions) and 1 or selected + 1
        elseif key == keys.q or key == keys.tab then break
        elseif key == keys.enter then
            if selected > #availableCurrencies then break end -- Cancel selected

            local chosenCurrency = availableCurrencies[selected]
            local amountStr = readInput("How many " .. chosenCurrency.name .. " to withdraw?: ", 6 + #menuOptions)
            local amount = tonumber(amountStr)
            if not amount or amount <= 0 then
                showMessage("Error", "Invalid amount.", true)
            else
                drawWindow("Processing..."); term.setCursorPos(2, 4); term.write("Contacting bank...")
                rednet.send(bankServerId, {
                    type = "withdraw_item",
                    user = username,
                    item_name = chosenCurrency.name,
                    count = amount
                }, BANK_PROTOCOL)
                local _, response = rednet.receive(BANK_PROTOCOL, 10)

                if response and response.success then
                    balance = response.newBalance
                    term.setCursorPos(2, 6); term.write("Transaction approved. Requesting dispense...")
                    rednet.send(turtleClerkId, { type = "request_dispense", item_name = chosenCurrency.name, count = amount }, TURTLE_CLERK_PROTOCOL)
                    
                    local _, turtle_response = rednet.receive(TURTLE_CLERK_PROTOCOL, 15)
                    if turtle_response and turtle_response.success then
                        showMessage("Success", "Withdrew " .. amount .. " " .. chosenCurrency.name .. ". Please collect items.")
                    else
                        showMessage("Error", turtle_response and turtle_response.reason or "Dispense failed.", true)
                    end
                else
                    showMessage("Error", response and response.reason or "Withdrawal failed.", true)
                end
            end
            break -- Return to main menu after transaction attempt
        end
    end
end

--==============================================================================
-- Main Program Logic
--==============================================================================

local function runSession()
    local drive = peripheral.find("drive")
    if not drive then
        showMessage("ATM Error", "No disk drive attached.", true)
        return
    end

    rednet.open("back")
    drawWindow("Connecting..."); term.setCursorPos(2, 4); term.write("Finding Bank Server...")
    bankServerId = rednet.lookup(BANK_PROTOCOL, "bank.server")
    if not bankServerId then
        showMessage("Error", "Could not connect to the bank server.", true)
        rednet.close("back"); return
    end
    
    term.setCursorPos(2, 5); term.write("Finding Vault Clerk...")
    turtleClerkId = rednet.lookup(TURTLE_CLERK_PROTOCOL)
    if not turtleClerkId then
        showMessage("Error", "Could not connect to the vault clerk.", true)
        rednet.close("back"); return
    end

    drawWindow("Drunken Beard Bank")
    term.setCursorPos(2, 4); term.write("Please insert your bank card...")
    
    local user_from_card = nil
    while not user_from_card do
        local event, side = os.pullEvent("disk")
        
        if drive.isDiskPresent() then
            local mount_path = drive.getMountPath()
            if mount_path and fs.exists(mount_path .. "/.bankcard") then
                local file = fs.open(mount_path .. "/.bankcard", "r")
                if file then
                    user_from_card = file.readAll()
                    file.close()
                end
            end
        end
    end
    
    if not login(user_from_card) then
        drive.ejectDisk()
        showMessage("Login Failed", "Please take your card.", true)
        rednet.close("back"); return
    end

    -- Fetch latest rates after successful login
    rednet.send(bankServerId, { type = "get_balance_and_rates", user = username }, BANK_PROTOCOL)
    local _, response = rednet.receive(BANK_PROTOCOL, 5)
    if response then
        balance = response.balance or balance
        currencyRates = response.rates or {}
    end

    local options = {"View Balance & Rates", "Deposit", "Withdraw", "Exit"}
    local selected = 1
    while true do
        drawWindow("Drunken Beard Bank")
        term.setCursorPos(2, 4); term.write("Welcome, " .. username)
        term.setCursorPos(2, 5); term.write("Current Balance: $" .. balance)
        drawMenu(options, selected, 2, 8)
        
        local event, key = os.pullEvent("key")
        if key == keys.up then selected = (selected == 1) and #options or selected - 1
        elseif key == keys.down then selected = (selected == #options) and 1 or selected + 1
        elseif key == keys.enter then
            if selected == 1 then
                rednet.send(bankServerId, { type = "get_balance_and_rates", user = username }, BANK_PROTOCOL)
                local _, rate_response = rednet.receive(BANK_PROTOCOL, 5)
                if rate_response and rate_response.balance then
                    balance = rate_response.balance
                    currencyRates = rate_response.rates
                    drawWindow("Balance & Rates")
                    term.setCursorPos(2, 4); term.write("Current Balance: $" .. balance)
                    term.setCursorPos(2, 6); term.write("--- Live Exchange Rates ---")
                    local y = 7
                    for item, data in pairs(currencyRates) do
                        local name = item:gsub("minecraft:", ""):gsub("_", " ")
                        term.setCursorPos(2, y); term.write(string.format("1 %s = $%d", name, data.current))
                        y = y + 1
                    end
                    term.setCursorPos(2, y+1); term.write("Press any key to return...")
                    os.pullEvent("key")
                end
            elseif selected == 2 then deposit()
            elseif selected == 3 then withdraw()
            elseif selected == 4 then break end
        elseif key == keys.tab or key == keys.q then break end
    end

    drive.ejectDisk()
    rednet.close("back")
    clear(); print("Thank you for banking with Drunken Beard Bank!")
    sleep(2) -- Pause before the program reboots
end

--==============================================================================
-- Main Program Loop
--==============================================================================

while true do
    local ok, err = pcall(runSession)
    if not ok then
        -- If an error occurred, log it and reboot
        local file = fs.open("atm_crash.log", "a")
        if file then
            file.writeLine(os.date() .. " - FATAL ERROR: " .. tostring(err))
            file.close()
        end
        
        clear()
        term.setTextColor(colors.red)
        print("A fatal error occurred. The ATM will now reboot.")
        print(err)
        sleep(5)
        os.reboot()
    end
    -- If the session ended normally (user exited), the loop will just restart
end
