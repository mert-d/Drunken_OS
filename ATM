--[[
    Drunken Beard Bank - ATM Terminal (v4.4 - Secure Salt Protocol)
    by Gemini Gem & Drunken_Mustang

    Purpose:
    This version implements a secure salt-retrieval handshake with the server
    to resolve the "Invalid Credentials" error. It also includes more robust
    peripheral handling and error messages.

    Key Changes:
    - Reworked the login() function to first request the user's salt from the
      server before hashing the PIN.
    - Added error handling for cases where the disk drive or server cannot be found.
    - Standardized network communication to use the defined protocols.
]]

--==============================================================================
-- API & Library Initialization
--==============================================================================

-- Ensure the required crypto library is available.
if not fs.exists("lib/sha1_hmac.lua") then
    error("Missing required library: lib/sha1_hmac.lua", 0)
end
local crypto = require("lib.sha1_hmac")

--==============================================================================
-- Configuration & State
--==============================================================================

local bankServerId = nil
local turtleClerkId = nil
local username = nil
local balance = 0
local currencyRates = {}

-- Rednet protocols
local BANK_PROTOCOL = "DB_Bank"
local TURTLE_CLERK_PROTOCOL = "DB_ATM_Turtle"

--==============================================================================
-- UI & Theme
--==============================================================================

local hasColor = term.isColor and term.isColor()
local function safeColor(primary, fallback)
    return hasColor and primary or fallback
end

local COLOR_BG = safeColor(colors.black, colors.black)
local COLOR_TEXT = safeColor(colors.lightGray, colors.white)
local COLOR_ERROR = safeColor(colors.red, colors.red)
local COLOR_SUCCESS = safeColor(colors.green, colors.green)
local COLOR_HEADER = safeColor(colors.orange, colors.white)
local COLOR_BORDER = safeColor(colors.gray, colors.lightGray)

local monitor = term.isColor() and term.native() or term
local width, height = monitor.getSize()

local function clear()
    monitor.setBackgroundColor(COLOR_BG)
    monitor.clear()
    monitor.setCursorPos(1, 1)
end

local function clearLine(y)
    monitor.setCursorPos(1, y)
    monitor.clearLine()
end

local function setStatus(msg, color)
    clearLine(height)
    monitor.setCursorPos(1, height)
    monitor.setTextColor(color or COLOR_TEXT)
    monitor.write(msg)
end

local function clearStatus()
    clearLine(height)
end

local function passwordPrompt()
    clear()
    monitor.setCursorPos(math.floor(width/2) - 8, math.floor(height/2) - 1)
    monitor.write("Enter your PIN:")
    monitor.setCursorPos(math.floor(width/2) - 8, math.floor(height/2))
    return read("*")
end

--==============================================================================
-- Network & Peripheral Functions
--==============================================================================

local function findBankServer()
    setStatus("Searching for bank server...")
    for _, side in ipairs(rs.getSides()) do
        if peripheral.getType(side) == "modem" then
            rednet.open(side)
            rednet.broadcast(BANK_PROTOCOL, "atm_ping")
            local id, _, protocol = rednet.receive(BANK_PROTOCOL, 2)
            if id and protocol == BANK_PROTOCOL then
                setStatus("Bank server found.", COLOR_SUCCESS)
                sleep(1)
                return id
            end
        end
    end
    return nil
end

local function waitForCard()
    local drive = peripheral.find("drive")
    if not drive then
        setStatus("No disk drive attached.", COLOR_ERROR)
        sleep(3)
        return nil
    end

    while not drive.isDiskPresent() do
        setStatus("Please insert your bank card...")
        os.pullEvent("disk")
    end

    setStatus("Card inserted. Reading...", COLOR_SUCCESS)
    local user = disk.getLabel(drive.getMountPath())
    if not user then
        setStatus("This is not a valid bank card.", COLOR_ERROR)
        drive.ejectDisk()
        sleep(3)
        return nil
    end

    return user
end

--==============================================================================
-- Main Application Logic
--==============================================================================

local function login()
    setStatus("Requesting salt for user " .. username .. "...")
    rednet.send(bankServerId, ("getsalt \"%s\""):format(username), BANK_PROTOCOL)

    local sender, salt = rednet.receive(BANK_PROTOCOL, 5)
    if not sender then
        setStatus("Server did not respond to salt request.", COLOR_ERROR)
        sleep(2)
        return false
    end

    if salt == "UNKNOWN_USER" then
        setStatus("Username not recognized by server.", COLOR_ERROR)
        sleep(2)
        return false
    end

    local password = passwordPrompt()
    if not password then return false end

    local hashedPassword = crypto.sha1_hmac(tostring(salt), password)
    setStatus("Verifying credentials...")
    rednet.send(bankServerId, ("login \"%s\" \"%s\""):format(username, hashedPassword), BANK_PROTOCOL)

    local _, response = rednet.receive(BANK_PROTOCOL, 5)
    if response == "true" then
        setStatus("Login successful.", COLOR_SUCCESS)
        rednet.send(bankServerId, "get_balance", BANK_PROTOCOL)
        local _, newBalance = rednet.receive(BANK_PROTOCOL, 5)
        balance = tonumber(newBalance) or 0
        return true
    else
        setStatus("Invalid PIN.", COLOR_ERROR)
        sleep(2)
        return false
    end
end

local function deposit()
    -- This function would need a corresponding turtle or other peripheral
    -- For now, it's a placeholder.
    setStatus("Deposit functionality requires a Bank Clerk Turtle.", COLOR_HEADER)
    sleep(3)
end

local function withdraw()
    clear()
    monitor.setCursorPos(1, 1); print("Enter amount to withdraw:")
    local amount = tonumber(read())
    if amount and amount > 0 then
        setStatus("Requesting withdrawal...")
        rednet.send(bankServerId, ("withdraw %d"):format(amount), BANK_PROTOCOL)
        local _, response = rednet.receive(BANK_PROTOCOL, 5)
        if response == "true" then
            setStatus("Withdrawal successful.", COLOR_SUCCESS)
            balance = balance - amount
        else
            setStatus("Insufficient funds or server error.", COLOR_ERROR)
        end
    else
        setStatus("Invalid amount.", COLOR_ERROR)
    end
    sleep(2)
end

local function menu()
    while true do
        clear()
        monitor.setTextColor(COLOR_HEADER)
        monitor.setCursorPos(2, 2); print("Drunken Beard Bank")
        monitor.setCursorPos(width - string.len(username) - 1, 2); print(username)

        monitor.setTextColor(COLOR_BORDER)
        for x=1,width do monitor.setCursorPos(x, 3); print("-") end

        monitor.setTextColor(COLOR_TEXT)
        monitor.setCursorPos(2, 5); print("Balance: $" .. balance)

        local options = {"View Rates", "Deposit", "Withdraw", "Exit"}
        local selected = 1

        while true do
            for i, v in ipairs(options) do
                monitor.setCursorPos(4, 7 + i)
                if i == selected then
                    monitor.setTextColor(COLOR_BG)
                    monitor.setBackgroundColor(COLOR_TEXT)
                else
                    monitor.setTextColor(COLOR_TEXT)
                    monitor.setBackgroundColor(COLOR_BG)
                end
                print(v)
            end
            monitor.setBackgroundColor(COLOR_BG)

            local _, key = os.pullEvent("key")
            if key == keys.up then
                selected = selected - 1
                if selected < 1 then selected = #options end
            elseif key == keys.down then
                selected = selected + 1
                if selected > #options then selected = 1 end
            elseif key == keys.enter then
                if selected == 1 then
                    setStatus("Requesting currency rates...")
                    rednet.send(bankServerId, "get_rates", BANK_PROTOCOL)
                    local _, ratesStr = rednet.receive(BANK_PROTOCOL, 5)
                    local rates = ratesStr and textutils.unserialize(ratesStr)
                    clear()
                    monitor.setCursorPos(1,1); print("Currency Rates:")
                    local y = 3
                    for name, data in pairs(rates or {}) do
                        name = name:gsub("minecraft:", ""):gsub("_", " ")
                        monitor.setCursorPos(2, y); term.write(string.format("1 %s = $%d", name, data.current))
                        y = y + 1
                    end
                    monitor.setCursorPos(2, y+1); term.write("Press any key to return...")
                    os.pullEvent("key")
                elseif selected == 2 then deposit()
                elseif selected == 3 then withdraw()
                elseif selected == 4 then return end
            elseif key == keys.q or key == keys.tab then
                return
            end
        end
    end
end

--==============================================================================
-- Main Program Loop
--==============================================================================

local function runSession()
    clear()
    bankServerId = findBankServer()
    if not bankServerId then
        setStatus("Could not find bank server.", COLOR_ERROR)
        sleep(5)
        return
    end

    username = waitForCard()
    if not username then return end

    if login() then
        menu()
    end

    drive.ejectDisk("bottom") -- Assuming drive is on the bottom
    rednet.close()
    clear(); print("Thank you for banking with Drunken Beard Bank!")
    sleep(2)
end

while true do
    local ok, err = pcall(runSession)
    if not ok then
        local file = fs.open("atm_crash.log", "a")
        if file then
            file.writeLine(os.date() .. " - FATAL ERROR: " .. tostring(err))
            file.close()
        end
        clear()
        term.setTextColor(COLOR_ERROR)
        print("A fatal error occurred. The ATM will now reboot.")
        print(err)
        term.setTextColor(COLOR_TEXT)
        sleep(5)
        os.reboot()
    end
end

