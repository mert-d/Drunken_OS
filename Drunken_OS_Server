--[[
    Drunken OS - Mainframe Server (v9.0 - Unified Distribution)
    by Gemini Gem

    Purpose:
    This version creates a unified and robust system for distributing all
    code (programs, games, and libraries) from a central, in-memory database.
    It removes filesystem dependencies for client requests, making the entire
    update and installation process more secure and reliable.

    Key Changes:
    - Added a new `libraryCode` table and a `LIBS_DB` file for persistence.
    - The `publishlib` command now loads a library from the server's local
      disk into the `libraryCode` database, making it available for distribution.
    - The `get_library` network handler now serves files directly from the
      `libraryCode` database instead of the filesystem.
    - Removed the complex `package.path` modifications, as they are no longer
      needed. The server now only needs its own libraries to be findable.
]]

--==============================================================================
-- Environment Setup
--==============================================================================

-- Add the current program's directory to the package path. This is just for the
-- server's own internal libraries, not for distribution.
package.path = fs.getDir(shell.getRunningProgram()) .. "/?.lua;" .. package.path

--==============================================================================
-- API & Library Initialization
--==============================================================================

-- Startup Check: Verify that the server's OWN required libraries exist.
local ok_crypto, crypto = pcall(require, "lib.sha1_hmac")
if not ok_crypto then
    term.setBackgroundColor(colors.red); term.setTextColor(colors.white); term.clear(); term.setCursorPos(1, 1)
    print("FATAL ERROR: Could not find required library 'lib/sha1_hmac.lua'. Please ensure it is in a 'lib' folder next to the server script.")
    error("Missing required library.", 0)
end

local ok_auth, AuthClient = pcall(require, "HyperAuthClient/api/auth_client")
if not ok_auth then
    term.setBackgroundColor(colors.red); term.setTextColor(colors.white); term.clear(); term.setCursorPos(1, 1)
    print("FATAL ERROR: The HyperAuthClient API could not be found. Please ensure it exists at '/HyperAuthClient/api/auth_client.lua'.")
    error("HyperAuthClient API not found.", 0)
end

--==============================================================================
-- Configuration & State
--==============================================================================

local admins = { ["MuhendizBey"] = true }

local users, lists, games, chatHistory, gameList, pendingAuths = {}, {}, {}, {}, {}, {}
local programVersions, programCode, gameCode, libraryCode = {}, {}, {}, {}
local logHistory, adminInput, motd = {}, "", ""

-- Database file paths
local USERS_DB = "users.db"
local LISTS_DB = "lists.db"
local GAMES_DB = "games.db"
local CHAT_DB = "chat.db"
local UPDATER_DB = "updater.db"
local GAMELIST_DB = "gamelist.db"
local GAMES_CODE_DB = "games_code.db"
local LIBS_DB = "libs.db" -- New database for libraries
local MOTD_FILE = "motd.txt"
local LOG_FILE = "server.log"

-- Rednet Protocols
local AUTH_SERVER_PROTOCOL = "auth.secure.v1"
local AUTH_INTERLINK_PROTOCOL = "Drunken_Auth_Interlink"
local ADMIN_PROTOCOL = "Drunken_Admin"

--==============================================================================
-- UI & Theme (Redacted for brevity, unchanged)
--==============================================================================
local hasColor = term.isColor and term.isColor()
local function safeColor(c, f) return hasColor and colors[c] or f end
local theme = { bg = safeColor("black", 0), text = safeColor("white", 15), windowBg = safeColor("darkGray", 8), title = safeColor("red", 1), prompt = safeColor("cyan", 9), statusBarBg = safeColor("gray", 7), statusBarText = safeColor("white", 15) }
local function wordWrap(text, width) local l={}; for line in text:gmatch("[^\n]+") do while #line > width do local s,e = line:find(" ()", width-1); e = e or width+1; table.insert(l, line:sub(1,e-1)); line = line:sub(e):match("^%s*(.*)") end; table.insert(l, line) end; return l end
local function redrawAdminUI()
    local w, h = term.getSize(); term.setBackgroundColor(theme.windowBg); term.clear(); term.setBackgroundColor(theme.title); term.setCursorPos(1, 1); term.write((" "):rep(w)); term.setTextColor(colors.white)
    local t = " Mainframe Admin Console "; term.setCursorPos(math.floor((w-#t)/2)+1, 1); term.write(t); term.setBackgroundColor(theme.statusBarBg); term.setTextColor(theme.statusBarText); term.setCursorPos(1, h); term.write((" "):rep(w))
    local s = "RUNNING | Type 'help' for commands"; term.setCursorPos(2, h); term.write(s); term.setBackgroundColor(theme.windowBg); term.setTextColor(theme.text); local lh = h-4; local dl={}; for i=#logHistory,1,-1 do local wr=wordWrap(logHistory[i],w-2); for j=#wr,1,-1 do table.insert(dl,1," "..wr[j]); if #dl >= lh then break end end; if #dl >= lh then break end end
    for i=1,math.min(#dl,lh) do term.setCursorPos(1,1+i); term.write(dl[i]) end; term.setCursorPos(1,h-2); term.write(("-"):rep(w)); term.setCursorPos(1,h-1); term.setTextColor(theme.prompt); term.write("> "); term.setTextColor(theme.text); term.write(adminInput)
end
local function logActivity(message, isError)
    local p=isError and "[ERROR] " or "[INFO] "; local le=os.date("[%H:%M:%S] ")..p..message; table.insert(logHistory,le); if #logHistory>200 then table.remove(logHistory,1) end
    local f=fs.open(LOG_FILE,"a"); if f then f.writeLine(os.date("[%Y-%m-%d %H:%M:%S] ")..p..message); f.close() end; redrawAdminUI()
end

--==============================================================================
-- Data Persistence (Redacted for brevity, load/save functions unchanged)
--==============================================================================
local function saveTableToFile(path, data) local f=fs.open(path,"w"); if not f then logActivity("Save failed: "..path,true); return false end; local s,e=pcall(function() f.write(textutils.serialize(data)); f.close() end); if not s then logActivity("Write failed: "..path..": "..tostring(e),true) end return s end
local function loadTableFromFile(path) if fs.exists(path) then local f=fs.open(path,"r"); if f then local d=f.readAll(); f.close(); local s,r=pcall(textutils.unserialize,d); if s and type(r)=="table" then return r else logActivity("Corrupt data: "..path, true) end end end; return {} end
local function loadAllData()
    users = loadTableFromFile(USERS_DB); lists = loadTableFromFile(LISTS_DB); games = loadTableFromFile(GAMES_DB); chatHistory = loadTableFromFile(CHAT_DB); gameList = loadTableFromFile(GAMELIST_DB)
    local updaterData = loadTableFromFile(UPDATER_DB); programVersions = updaterData.v or {}; programCode = updaterData.c or {}; gameCode = loadTableFromFile(GAMES_CODE_DB)
    libraryCode = loadTableFromFile(LIBS_DB) -- Load libraries
    if fs.exists(MOTD_FILE) then local f=fs.open(MOTD_FILE,"r"); motd=f.readAll(); f.close() end; logActivity("All Mainframe data loaded.")
end

--==============================================================================
-- Mail & List Management (Redacted for brevity, unchanged)
--==============================================================================
local function saveItem(u,i,t) local d=t.."/"..u; if not fs.exists(d) then fs.makeDir(d) end; local id=os.time().."-"..math.random(100,999); saveTableToFile(d.."/"..id,i) end
local function loadMail(u) local p="mail/"..u; local m={}; if fs.exists(p) and fs.isDir(p) then for _,f in ipairs(fs.list(p)) do local mp=p.."/"..f; local mf=fs.open(mp,"r"); if mf then local d=mf.readAll(); mf.close(); local s,i=pcall(textutils.unserialize,d); if s and i then i.id=f; table.insert(m,i) else logActivity("Corrupt mail: "..mp,true) end end end end; return m end
local function deleteItem(u,id,t) local p=t.."/"..u.."/"..id; if fs.exists(p) then fs.delete(p); return true end; return false end

--==============================================================================
-- Authentication (Redacted for brevity, unchanged)
--==============================================================================
local function requestAuthCode(u,p,n,s,pr) logActivity("Requesting auth for '"..u.."'..."); local r,e=AuthClient.requestCode(AUTH_SERVER_PROTOCOL,{username=u,password=p,vendorID="DrunkenOS_Mainframe",computerID=os.getComputerID(),extra={purpose=pr or "unknown"}}); if not r then logActivity("HyperAuth err: "..tostring(e),true); rednet.send(s,{success=false,reason="Auth service err."},"SimpleMail"); return nil end; logActivity("HyperAuth success. ID: "..r.request_id); pendingAuths[u]={request_id=r.request_id,password=p,nickname=n,senderId=s,timestamp=os.time()}; return r.request_id end

--==============================================================================
-- Network Request Handlers
--==============================================================================

local mailHandlers = {}
function mailHandlers.get_version(s, m) rednet.send(s, { version = programVersions[m.program] or 0 }, "SimpleMail") end
function mailHandlers.get_update(s, m) rednet.send(s, { code = programCode[m.program] }, "SimpleMail") end

-- **MODIFIED** - Now serves libraries from the internal database.
function mailHandlers.get_library(senderId, message)
    local path = message.path
    logActivity("Client " .. senderId .. " requested library: " .. path)
    if path and libraryCode[path] then
        rednet.send(senderId, { code = libraryCode[path] }, "SimpleMail")
        logActivity("Sent library '" .. path .. "' to client " .. senderId)
    else
        rednet.send(senderId, { code = nil }, "SimpleMail")
        logActivity("Library not found in database: '" .. (path or "nil") .. "'", true)
    end
end

-- All other handlers (register, login, etc.) remain the same, just using `crypto.hex`
-- (Redacted for brevity)
function mailHandlers.register(s,m) if users[m.user] then rednet.send(s,{success=false,reason="Username taken."},"SimpleMail") return end; local r=requestAuthCode(m.user,crypto.hex(m.pass),m.nickname,s,"register"); if r then rednet.send(s,{success=true,needs_auth=true},"SimpleMail") end end
function mailHandlers.login(s,m) local h=users[m.user] and users[m.user].password; if not h or h~=crypto.hex(m.pass) then rednet.send(s,{success=false,reason="Invalid login."},"SimpleMail") return end; if m.session_token and users[m.user].session_token==m.session_token then logActivity("User '"..m.user.."' logged in with token."); rednet.send(s,{success=true,needs_auth=false,nickname=users[m.user].nickname,unreadCount=#loadMail(m.user),isAdmin=admins[m.user] or false},"SimpleMail") return end; local r=requestAuthCode(m.user,crypto.hex(m.pass),nil,s,"login"); if r then rednet.send(s,{success=true,needs_auth=true},"SimpleMail") end end
function mailHandlers.submit_auth_token(s,m) local u,c=m.user,m.token; logActivity("Auth code from '"..u.."'"); local d=pendingAuths[u]; if not d then rednet.send(s,{success=false,reason="No auth pending."},"SimpleMail") return end; local r,e=AuthClient.verifyCode(AUTH_SERVER_PROTOCOL,{request_id=d.request_id,code=c}); if not r then logActivity("HyperAuth verify err: "..tostring(e),true); rednet.send(s,{success=false,reason="Auth service err."},"SimpleMail") return end; if r.ok then local p={}; local nst=crypto.hex(os.time()..math.random()); if not users[u] then users[u]={password=d.password,nickname=d.nickname,session_token=nst}; if saveTableToFile(USERS_DB,users) then p={success=true,unreadCount=0,nickname=d.nickname,session_token=nst,isAdmin=admins[u] or false}; logActivity("User '"..u.."' registered.") else p={success=false,reason="DB error."} end else users[u].session_token=nst; saveTableToFile(USERS_DB,users); p={success=true,unreadCount=#loadMail(u),nickname=users[u].nickname,session_token=nst,isAdmin=admins[u] or false}; logActivity("User '"..u.."' logged in.") end; rednet.send(s,p,"SimpleMail"); pendingAuths[u]=nil else rednet.send(s,{success=false,reason=r.reason or "Invalid code."},"SimpleMail"); logActivity("Auth fail "..u..": "..(r.reason or "Unknown"),true) end end
function mailHandlers.set_nickname(s,m) local u,n=m.user,m.new_nickname; if users[u] and n and n~="" then users[u].nickname=n; if saveTableToFile(USERS_DB,users) then rednet.send(s,{success=true,new_nickname=n},"SimpleMail"); logActivity("'"..u.."' set nick to '"..n.."'") else rednet.send(s,{success=false,reason="DB err."},"SimpleMail") end else rednet.send(s,{success=false,reason="Invalid req."},"SimpleMail") end end
function mailHandlers.user_exists(s,m) local r=m.user; local e=false; if r and r~="" then if r=="@all" then e=true elseif r:sub(1,1)=="@" then e=lists[r:sub(2)]~=nil else e=users[r]~=nil end end; rednet.send(s,{exists=e},"SimpleMail") end
function mailHandlers.send(s,m) local mail=m.mail; if mail.to=="@all" then for u,_ in pairs(users) do saveItem(u,mail,"mail") end; logActivity("Mail from '"..mail.from_nickname.."' to @all") elseif mail.to:sub(1,1)=="@" then local ln=mail.to:sub(2); if lists[ln] then for _,mem in ipairs(lists[ln]) do saveItem(mem,mail,"mail") end; logActivity("Mail from '"..mail.from_nickname.."' to list '"..ln.."'") end else saveItem(mail.to,mail,"mail"); logActivity("Mail from '"..mail.from_nickname.."' to '"..mail.to.."'") end; rednet.send(s,{status="Mail sent."},"SimpleMail") end
function mailHandlers.fetch(s,m) rednet.send(s,{mail=loadMail(m.user)},"SimpleMail") end
function mailHandlers.delete(s,m) if deleteItem(m.user,m.id,"mail") then logActivity("User '"..m.user.."' deleted mail '"..m.id.."'") end end
function mailHandlers.create_list(s,m) if lists[m.name] then rednet.send(s,{success=false,status="List exists."},"SimpleMail") else lists[m.name]={[1]=m.creator}; if saveTableToFile(LISTS_DB,lists) then rednet.send(s,{success=true,status="List created."},"SimpleMail"); logActivity("User '"..m.creator.."' created list '"..m.name.."'") end end end
function mailHandlers.join_list(s,m) if not lists[m.name] then rednet.send(s,{success=false,status="No such list."},"SimpleMail") return end; for _,mem in ipairs(lists[m.name]) do if mem==m.user then rednet.send(s,{success=false,status="Already member."},"SimpleMail") return end end; table.insert(lists[m.name],m.user); if saveTableToFile(LISTS_DB,lists) then rednet.send(s,{success=true,status="Joined list."},"SimpleMail"); logActivity("User '"..m.user.."' joined list '"..m.name.."'") end end
function mailHandlers.get_lists(s,m) rednet.send(s,{lists=lists},"SimpleMail") end
function mailHandlers.get_motd(s,m) rednet.send(s,{motd=motd},"SimpleMail") end
function mailHandlers.get_chat_history(s,m) rednet.send(s,{history=chatHistory},"SimpleMail") end
function mailHandlers.get_unread_count(s,m) rednet.send(s,{type="unread_count_response",count=#loadMail(m.user)},"SimpleMail") end
function mailHandlers.get_gamelist(s,m) rednet.send(s,{type="gamelist_response",games=gameList},"SimpleMail") end
function mailHandlers.get_all_game_versions(s,m) local v={}; for f,d in pairs(gameCode) do v[f]=d.version end; rednet.send(s,{type="game_versions_response",versions=v},"SimpleMail") end
function mailHandlers.get_game_update(s,m) local f=m.filename; if gameCode[f] then rednet.send(s,{type="game_update_response",filename=f,code=gameCode[f].code},"SimpleMail") end end
local gameHandlers={}
function gameHandlers.submit_score(s,m) local g,u,sc=m.game,m.user,m.score; if not games[g] then games[g]={} end; if not games[g][u] or sc>games[g][u] then games[g][u]=sc; if saveTableToFile(GAMES_DB,games) then logActivity("New high score for '"..u.."' in '"..g.."': "..sc) end end end
function gameHandlers.get_leaderboard(s,m) local g=m.game; local l=(games[g]) or {}; rednet.send(s,{leaderboard=l},"ArcadeGames") end


--==============================================================================
-- Admin Command Handlers & Main Loops
--==============================================================================
local adminCommands = {}
function adminCommands.help() print("Commands: users, deluser, lists, dellist, board, delscore, motd, broadcast, publish, publishlib, addgame, delgame, games, publishgame") end
function adminCommands.users() logActivity("Users:"); for u,d in pairs(users) do logActivity("- "..u.." (Nick: "..(d.nickname or "N/A")..")") end end
function adminCommands.deluser(a) local u=a[2]; if not u then logActivity("Usage: deluser <name>") return end; if users[u] then users[u]=nil; saveTableToFile(USERS_DB,users); logActivity("Deleted user: "..u) else logActivity("User not found: "..u) end end
function adminCommands.lists() logActivity("Lists:"); for n,m in pairs(lists) do logActivity("- "..n.." ("..#m.." members)") end end
function adminCommands.dellist(a) local n=a[2]; if not n then logActivity("Usage: dellist <name>") return end; if lists[n] then lists[n]=nil; saveTableToFile(LISTS_DB,lists); logActivity("Deleted list: "..n) else logActivity("List not found: "..n) end end
function adminCommands.board(a) local g=a[2]; if not g then logActivity("Usage: board <game>") return end; if games[g] then logActivity("Board for "..g..":"); for u,s in pairs(games[g]) do logActivity("- "..u..": "..s) end else logActivity("No board for game: "..g) end end
function adminCommands.delscore(a) local g,u=a[2],a[3]; if not g or not u then logActivity("Usage: delscore <game> <user>") return end; if games[g] and games[g][u] then games[g][u]=nil; saveTableToFile(GAMES_DB,games); logActivity("Deleted score for '"..u.."' in '"..g.."'") else logActivity("No score for user '"..u.."' in game '"..g.."'") end end
function adminCommands.motd(a) table.remove(a,1); motd=table.concat(a," "); local f=fs.open(MOTD_FILE,"w"); if f then f.write(motd); f.close() end; logActivity("New MOTD set.") end
function adminCommands.broadcast(a) table.remove(a,1); local t=table.concat(a," "); rednet.broadcast({type="broadcast",text=t},"SimpleMail"); logActivity("Broadcast: "..t) end
function adminCommands.publish(a) local p,v=a[2],a[3]; if not p or not v then logActivity("Usage: publish <prog> <ver>") return end; local n=tonumber(v); if not n then logActivity("Version must be a number.") return end; logActivity("Waiting for '"..p.."' v"..n); local _,m=rednet.receive("Publication",15); if m and m.code then programCode[p]=m.code; programVersions[p]=n; saveTableToFile(UPDATER_DB,{v=programVersions,c=programCode}); logActivity("Published "..p.." v"..n) else logActivity("Publish timed out.") end end
-- **MODIFIED** - Now loads library from local disk into the database.
function adminCommands.publishlib(args)
    local libPath = args[2]
    if not libPath then
        logActivity("Usage: publishlib <path_to_lib_file>", true)
        return
    end
    if not fs.exists(libPath) then
        logActivity("Error: File not found at '" .. libPath .. "'", true)
        return
    end
    local file = fs.open(libPath, "r")
    if not file then
        logActivity("Error: Could not open file '"..libPath.."'", true)
        return
    end
    local content = file.readAll()
    file.close()
    libraryCode[libPath] = content
    if saveTableToFile(LIBS_DB, libraryCode) then
        logActivity("Published library '"..libPath.."' to distribution database.")
    else
        logActivity("Error: Could not save library database.", true)
        libraryCode[libPath] = nil -- Revert change on failure
    end
end
function adminCommands.addgame(a) local n,f=a[2],a[3]; if not n or not f then logActivity("Usage: addgame <DisplayName> <filename>") return end; table.insert(gameList,{name=n,file=f}); saveTableToFile(GAMELIST_DB,gameList); logActivity("Added game '"..n.."'") end
function adminCommands.delgame(a) local n=a[2]; if not n then logActivity("Usage: delgame <DisplayName>") return end; for i,g in ipairs(gameList) do if g.name==n then table.remove(gameList,i); saveTableToFile(GAMELIST_DB,gameList); logActivity("Removed game '"..n.."'"); return end end; logActivity("Game '"..n.."' not found.") end
function adminCommands.games() logActivity("Games:"); for _,g in ipairs(gameList) do logActivity("- "..g.name.." (file: "..g.file..")") end end
function adminCommands.publishgame(a) local f=a[2]; if not f then logActivity("Usage: publishgame <filename>",true) return end; if not fs.exists(f) then logActivity("File not found: "..f,true) return end; local h=fs.open(f,"r"); if not h then logActivity("Cannot open file.",true) return end; local c=h.readAll(); h.close(); local v=c:match("%-%-%s*Version:%s*([%d%.]+)"); if not v then logActivity("No version comment in file.",true) return end; gameCode[f]={code=c,version=tonumber(v)}; if saveTableToFile(GAMES_CODE_DB,gameCode) then logActivity("Published game '"..f.."' v"..v) else logActivity("Failed to save game DB.",true) end end
local function executeAdminCommand(c) local o={}; local op=print; _G.print=function(...) local a={...}; local l=""; for i=1,#a do l=l..tostring(a[i]).."\t" end; table.insert(o,l) end; local ar={}; for arg in c:gmatch("[^%s]+") do table.insert(ar,arg) end; local cmd=ar[1]; if adminCommands[cmd] then adminCommands[cmd](ar) else print("Unknown command.") end; _G.print=op; return table.concat(o,"\n") end
local function networkListener() while true do local s,m,p=rednet.receive(); if p=="SimpleMail" and m and m.type and mailHandlers[m.type] then mailHandlers[m.type](s,m) elseif p=="SimpleChat" and m and m.from then local n=(users[m.from] and users[m.from].nickname) or m.from; local e="["..n.."]: "..m.text; table.insert(chatHistory,e); if #chatHistory>100 then table.remove(chatHistory,1) end; saveTableToFile(CHAT_DB,chatHistory); rednet.broadcast({from=n,text=m.text},"SimpleChat") elseif p=="ArcadeGames" and m and m.type and gameHandlers[m.type] then gameHandlers[m.type](s,m) elseif p==AUTH_INTERLINK_PROTOCOL and m.type=="user_exists_check" then local u=m.user; rednet.send(s,{user=u,exists=(users[u]~=nil)},AUTH_INTERLINK_PROTOCOL) elseif p==ADMIN_PROTOCOL and m.type=="execute_command" then if m.user and admins[m.user] then logActivity("Remote command from "..m.user); local out=executeAdminCommand(m.command); rednet.send(s,{output=out},ADMIN_PROTOCOL) else logActivity("Unauthorized cmd from "..(m.user or "unknown"),true); rednet.send(s,{output="Access denied."},ADMIN_PROTOCOL) end end end end
local function adminTerminal() while true do local e,p=os.pullEvent(); if e=="key" then if p==keys.enter then if adminInput~="" then logActivity("Local command: "..adminInput); local out=executeAdminCommand(adminInput); for l in out:gmatch("[^\n]+") do logActivity(l) end; adminInput="" end elseif p==keys.backspace then adminInput=adminInput:sub(1,-2) end elseif e=="char" then adminInput=adminInput..p end; redrawAdminUI() end end
local function main()
    loadAllData()
    for _,s in ipairs(rs.getSides()) do if peripheral.getType(s)=="modem" then rednet.open(s) end end
    rednet.host("SimpleMail","mail.server"); rednet.host("SimpleChat","chat.server"); rednet.host("ArcadeGames","arcade.server"); rednet.host(ADMIN_PROTOCOL,"admin.server")
    logActivity("Mainframe Server started.")
    parallel.waitForAny(networkListener, adminTerminal)
end

main()
