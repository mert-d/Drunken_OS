--[[
    Drunken OS - Mainframe Server (v9.9 - Game Update Fix)
    by Gemini Gem

    Purpose:
    This definitive version fixes a critical bug where the server would not
    respond to a client's request for the game version list, preventing the
    game updater from functioning.

    Key Changes:
    - Added the missing `get_all_game_versions` network handler.
    - All code is fully formatted to the "Gem Standard".
    - Version number incremented to v9.9 to reflect this critical fix.
]]

--==============================================================================
-- Environment Setup
--==============================================================================

-- Add the current program's directory to the package path for the server's own needs.
package.path = fs.getDir(shell.getRunningProgram()) .. "/?.lua;" .. package.path

--==============================================================================
-- API & Library Initialization
--==============================================================================

-- Startup Check: Verify that the server's OWN required libraries exist.
local ok_crypto, crypto = pcall(require, "lib.sha1_hmac")
if not ok_crypto then
    term.setBackgroundColor(colors.red); term.setTextColor(colors.white); term.clear(); term.setCursorPos(1, 1)
    print("================ FATAL ERROR ================")
    print("Required library 'lib/sha1_hmac' not found!")
    print("Please make sure the file exists at either:")
    print(" > " .. fs.getDir(shell.getRunningProgram()) .. "/lib/sha1_hmac.lua")
    print("OR")
    print(" > /lib/sha1_hmac.lua")
    print("=============================================")
    error("Missing required library.", 0)
end

local ok_auth, AuthClient = pcall(require, "HyperAuthClient/api/auth_client")
if not ok_auth then
    term.setBackgroundColor(colors.red); term.setTextColor(colors.white); term.clear(); term.setCursorPos(1, 1)
    print("================ FATAL ERROR ================")
    print("The HyperAuthClient API could not be found.")
    print("Please ensure it exists at:")
    print(" > /HyperAuthClient/api/auth_client.lua")
    print("=============================================")
    print("Server shutting down.")
    error("HyperAuthClient API not found.", 0)
end

--==============================================================================
-- Configuration & State
--==============================================================================

local admins = { ["MuhendizBey"] = true }
local users, lists, games, chatHistory, gameList, pendingAuths = {}, {}, {}, {}, {}, {}
local programVersions, programCode, gameCode, libraryPastes = {}, {}, {}, {}
local logHistory, adminInput, motd = {}, "", ""

local USERS_DB = "users.db"; local LISTS_DB = "lists.db"; local GAMES_DB = "games.db";
local CHAT_DB = "chat.db"; local UPDATER_DB = "updater.db"; local GAMELIST_DB = "gamelist.db";
local GAMES_CODE_DB = "games_code.db"; local LIB_PASTES_DB = "lib_pastes.db";
local MOTD_FILE = "motd.txt"; local LOG_FILE = "server.log";
local AUTH_SERVER_PROTOCOL = "auth.secure.v1";
local AUTH_INTERLINK_PROTOCOL = "Drunken_Auth_Interlink"; local ADMIN_PROTOCOL = "Drunken_Admin";

--==============================================================================
-- UI & Theme
--==============================================================================

local hasColor = term.isColor and term.isColor()
local function safeColor(colorName, fallbackColor) if hasColor and colors[colorName]~=nil then return colors[colorName] end return fallbackColor end
local theme = {bg=safeColor("black",colors.black),text=safeColor("white",colors.white),windowBg=safeColor("darkGray",colors.gray),title=safeColor("red",colors.red),prompt=safeColor("cyan",colors.cyan),statusBarBg=safeColor("gray",colors.lightGray),statusBarText=safeColor("white",colors.white)}
local function wordWrap(text, width) local lines={}; for line in text:gmatch("[^\r\n]+") do while #line>width do local s,e=line:find(" ()",width-1); e=e or width+1; table.insert(lines,line:sub(1,e-1)); line=line:sub(e):match("^%s*(.*)") end; table.insert(lines,line) end; return lines end
local function redrawAdminUI() local w,h=term.getSize();term.setBackgroundColor(theme.windowBg);term.clear();term.setBackgroundColor(theme.title);term.setCursorPos(1,1);term.write((" "):rep(w));term.setTextColor(colors.white);local t=" Mainframe Admin Console ";term.setCursorPos(math.floor((w-#t)/2)+1,1);term.write(t);term.setBackgroundColor(theme.statusBarBg);term.setTextColor(theme.statusBarText);term.setCursorPos(1,h);term.write((" "):rep(w));local s="RUNNING | Type 'help' for commands";term.setCursorPos(2,h);term.write(s);term.setBackgroundColor(theme.windowBg);term.setTextColor(theme.text);local lh=h-4;local dl={};for i=#logHistory,1,-1 do local wr=wordWrap(logHistory[i],w-2);for j=#wr,1,-1 do table.insert(dl,1," "..wr[j]);if #dl>=lh then break end end;if #dl>=lh then break end end;for i=1,math.min(#dl,lh) do term.setCursorPos(1,1+i);term.write(dl[i]) end;term.setCursorPos(1,h-2);term.write(("-"):rep(w));term.setCursorPos(1,h-1);term.setTextColor(theme.prompt);term.write("> ");term.setTextColor(theme.text);term.write(adminInput) end
local function logActivity(message,isError) local p=isError and "[ERROR] " or "[INFO] ";local le=os.date("[%H:%M:%S] ")..p..message;table.insert(logHistory,le);if #logHistory>200 then table.remove(logHistory,1) end;local f=fs.open(LOG_FILE,"a");if f then f.writeLine(os.date("[%Y-%m-%d %H:%M:%S] ")..p..message);f.close() end;redrawAdminUI() end

--==============================================================================
-- Data Persistence & Core Logic
--==============================================================================
local function saveTableToFile(path, data) local f=fs.open(path,"w");if not f then logActivity("Save failed: "..path,true) return false end;local s,e=pcall(function() f.write(textutils.serialize(data));f.close() end);if not s then logActivity("Write failed: "..path..": "..tostring(e),true) end;return s end
local function loadTableFromFile(path) if fs.exists(path) then local f=fs.open(path,"r");if f then local d=f.readAll();f.close();local s,r=pcall(textutils.unserialize,d);if s and type(r)=="table" then return r else logActivity("Corrupt data: "..path,true) end end end;return{}end
local function loadAllData() users=loadTableFromFile(USERS_DB);lists=loadTableFromFile(LISTS_DB);games=loadTableFromFile(GAMES_DB);chatHistory=loadTableFromFile(CHAT_DB);gameList=loadTableFromFile(GAMELIST_DB);local u=loadTableFromFile(UPDATER_DB);programVersions=u.v or{};programCode=u.c or{};gameCode=loadTableFromFile(GAMES_CODE_DB);libraryPastes=loadTableFromFile(LIB_PASTES_DB);if fs.exists(MOTD_FILE) then local f=fs.open(MOTD_FILE,"r");motd=f.readAll();f.close() end;logActivity("All Mainframe data loaded.") end
local function saveItem(u,i,t) local d=t.."/"..u;if not fs.exists(d) then fs.makeDir(d) end;local id=os.time().."-"..math.random(100,999);saveTableToFile(d.."/"..id,i) end
local function loadMail(u) local p="mail/"..u;local m={};if fs.exists(p)and fs.isDir(p)then for _,f in ipairs(fs.list(p))do local mp=p.."/"..f;local mf=fs.open(mp,"r");if mf then local d=mf.readAll();mf.close();local s,i=pcall(textutils.unserialize,d);if s and i then i.id=f;table.insert(m,i)else logActivity("Corrupt mail: "..mp,true)end end end end;return m end
local function deleteItem(u,id,t) local p=t.."/"..u.."/"..id;if fs.exists(p)then fs.delete(p)return true end return false end
local function requestAuthCode(u,p,n,s,pr) logActivity("Requesting auth for '"..u.."'...");local r,e=AuthClient.requestCode(AUTH_SERVER_PROTOCOL,{username=u,password=p,vendorID="DrunkenOS_Mainframe",computerID=os.getComputerID(),extra={purpose=pr or "unknown"}});if not r then logActivity("HyperAuth err: "..tostring(e),true);rednet.send(s,{success=false,reason="Auth service err."},"SimpleMail")return nil end;logActivity("HyperAuth success. ID: "..r.request_id);pendingAuths[u]={request_id=r.request_id,password=p,nickname=n,senderId=s,timestamp=os.time()};return r.request_id end

--==============================================================================
-- Network & Admin Handlers
--==============================================================================
local mailHandlers, gameHandlers, adminCommands = {}, {}, {}
function mailHandlers.get_version(s,m)rednet.send(s,{version=programVersions[m.program]or 0},"SimpleMail")end
function mailHandlers.get_update(s,m)rednet.send(s,{code=programCode[m.program]},"SimpleMail")end
function mailHandlers.get_lib_paste(s,m)local n=m.lib_name;logActivity("Client "..s.." requested paste for: "..n);rednet.send(s,{code=libraryPastes[n]},"SimpleMail")end
function mailHandlers.get_all_game_versions(senderId, message)
    local versions = {}
    for filename, data in pairs(gameCode) do
        versions[filename] = data.version
    end
    rednet.send(senderId, { type = "game_versions_response", versions = versions }, "SimpleMail")
end
function mailHandlers.get_game_update(senderId, message)
    local filename = message.filename
    if gameCode[filename] then
        rednet.send(senderId, { type = "game_update_response", filename = filename, code = gameCode[filename].code }, "SimpleMail")
    end
end
function mailHandlers.register(s, m) if users[m.user] then rednet.send(s, {success=false, reason="Username taken."}, "SimpleMail") return end; local r=requestAuthCode(m.user,crypto.hex(m.pass),m.nickname,s,"register"); if r then rednet.send(s,{success=true,needs_auth=true},"SimpleMail") end end
function mailHandlers.login(s, m) local h=users[m.user] and users[m.user].password; if not h or h~=crypto.hex(m.pass) then rednet.send(s,{success=false,reason="Invalid login."},"SimpleMail") return end; if m.session_token and users[m.user].session_token==m.session_token then logActivity("User '"..m.user.."' logged in with token."); rednet.send(s,{success=true,needs_auth=false,nickname=users[m.user].nickname,unreadCount=#loadMail(m.user),isAdmin=admins[m.user]or false},"SimpleMail") return end; local r=requestAuthCode(m.user,crypto.hex(m.pass),nil,s,"login"); if r then rednet.send(s,{success=true,needs_auth=true},"SimpleMail") end end
function mailHandlers.submit_auth_token(s,m) local u,c=m.user,m.token; local d=pendingAuths[u]; if not d then rednet.send(s,{success=false,reason="No auth pending."},"SimpleMail") return end; local r,e=AuthClient.verifyCode(AUTH_SERVER_PROTOCOL,{request_id=d.request_id,code=c}); if not r then logActivity("HyperAuth verify err: "..tostring(e),true); rednet.send(s,{success=false,reason="Auth service err."},"SimpleMail") return end; if r.ok then local p={}; local nst=crypto.hex(os.time()..math.random()); if not users[u] then users[u]={password=d.password,nickname=d.nickname,session_token=nst}; if saveTableToFile(USERS_DB,users) then p={success=true,unreadCount=0,nickname=d.nickname,session_token=nst,isAdmin=admins[u]or false}; logActivity("User '"..u.."' registered.") else p={success=false,reason="DB error."} end else users[u].session_token=nst; saveTableToFile(USERS_DB,users); p={success=true,unreadCount=#loadMail(u),nickname=users[u].nickname,session_token=nst,isAdmin=admins[u]or false}; logActivity("User '"..u.."' logged in.") end; rednet.send(s,p,"SimpleMail"); pendingAuths[u]=nil else rednet.send(s,{success=false,reason=r.reason or "Invalid code."},"SimpleMail"); logActivity("Auth fail "..u..": "..(r.reason or "Unknown"),true) end end
function mailHandlers.set_nickname(s,m) local u,n=m.user,m.new_nickname; if users[u] and n and n~="" then users[u].nickname=n; if saveTableToFile(USERS_DB,users) then rednet.send(s,{success=true,new_nickname=n},"SimpleMail"); logActivity("'"..u.."' set nick to '"..n.."'") else rednet.send(s,{success=false,reason="DB err."},"SimpleMail") end else rednet.send(s,{success=false,reason="Invalid req."},"SimpleMail") end end
function mailHandlers.user_exists(s,m) local r=m.user; local e=false; if r and r~="" then if r=="@all" then e=true elseif r:sub(1,1)=="@" then e=lists[r:sub(2)]~=nil else e=users[r]~=nil end end; rednet.send(s,{exists=e},"SimpleMail") end
function mailHandlers.send(s,m) local mail=m.mail; if mail.to=="@all" then for u,_ in pairs(users) do saveItem(u,mail,"mail") end; logActivity("Mail from '"..mail.from_nickname.."' to @all") elseif mail.to:sub(1,1)=="@" then local ln=mail.to:sub(2); if lists[ln] then for _,mem in ipairs(lists[ln]) do saveItem(mem,mail,"mail") end; logActivity("Mail from '"..mail.from_nickname.."' to list '"..ln.."'") end else saveItem(mail.to,mail,"mail"); logActivity("Mail from '"..mail.from_nickname.."' to '"..mail.to.."'") end; rednet.send(s,{status="Mail sent."},"SimpleMail") end
function mailHandlers.fetch(s,m) rednet.send(s,{mail=loadMail(m.user)},"SimpleMail") end
function mailHandlers.delete(s,m) if deleteItem(m.user,m.id,"mail") then logActivity("User '"..m.user.."' deleted mail '"..m.id.."'") end end
function mailHandlers.create_list(s,m) if lists[m.name] then rednet.send(s,{success=false,status="List exists."},"SimpleMail") else lists[m.name]={[1]=m.creator}; if saveTableToFile(LISTS_DB,lists) then rednet.send(s,{success=true,status="List created."},"SimpleMail"); logActivity("User '"..m.creator.."' created list '"..m.name.."'") end end end
function mailHandlers.join_list(s,m) if not lists[m.name] then rednet.send(s,{success=false,status="No such list."},"SimpleMail") return end; for _,mem in ipairs(lists[m.name]) do if mem==m.user then rednet.send(s,{success=false,status="Already member."},"SimpleMail") return end end; table.insert(lists[m.name],m.user); if saveTableToFile(LISTS_DB,lists) then rednet.send(s,{success=true,status="Joined list."},"SimpleMail"); logActivity("User '"..m.user.."' joined list '"..m.name.."'") end end
function mailHandlers.get_lists(s,m) rednet.send(s,{lists=lists},"SimpleMail") end
function mailHandlers.get_motd(s,m) rednet.send(s,{motd=motd},"SimpleMail") end
function mailHandlers.get_chat_history(s,m) rednet.send(s,{history=chatHistory},"SimpleMail") end
function mailHandlers.get_unread_count(s,m) rednet.send(s,{type="unread_count_response",count=#loadMail(m.user)},"SimpleMail") end
function mailHandlers.get_gamelist(s,m) rednet.send(s,{type="gamelist_response",games=gameList},"SimpleMail") end
function gameHandlers.submit_score(s,m) local g,u,sc=m.game,m.user,m.score; if not games[g] then games[g]={} end; if not games[g][u] or sc>games[g][u] then games[g][u]=sc; if saveTableToFile(GAMES_DB,games) then logActivity("New high score for '"..u.."' in '"..g.."': "..sc) end end end
function gameHandlers.get_leaderboard(s,m) local g=m.game; local l=(games[g]) or {}; rednet.send(s,{leaderboard=l},"ArcadeGames") end

function adminCommands.help() print("Commands: users, deluser, lists, dellist, board, delscore, motd, broadcast, publish, setlibpaste, addgame, delgame, games, publishgame") end
function adminCommands.users() logActivity("Users:"); for u,d in pairs(users) do logActivity("- "..u.." (Nick: "..(d.nickname or "N/A")..")") end end
function adminCommands.deluser(a) local u=a[2]; if not u then logActivity("Usage: deluser <name>") return end; if users[u] then users[u]=nil; saveTableToFile(USERS_DB,users); logActivity("Deleted user: "..u) else logActivity("User not found: "..u) end end
function adminCommands.setlibpaste(args) local libName=args[2]; local pasteCode=args[3]; if not libName or not pasteCode then logActivity("Usage: setlibpaste <lib_name> <pastebin_code>",true); logActivity("Example: setlibpaste sha1_hmac aBcDeFgH",true); return end; libraryPastes[libName]=pasteCode; if saveTableToFile(LIB_PASTES_DB,libraryPastes) then logActivity("Set paste for '"..libName.."' to "..pasteCode) else logActivity("Error saving lib paste DB.",true); libraryPastes[libName]=nil end end
function adminCommands.publish(a) local p,v=a[2],a[3]; if not p or not v then logActivity("Usage: publish <prog> <ver>") return end; local n=tonumber(v); if not n then logActivity("Version must be a number.") return end; logActivity("Waiting for '"..p.."' v"..n); local _,m=rednet.receive("Publication",15); if m and m.code then programCode[p]=m.code; programVersions[p]=n; saveTableToFile(UPDATER_DB,{v=programVersions,c=programCode}); logActivity("Published "..p.." v"..n) else logActivity("Publish timed out.") end end
local function executeAdminCommand(command) local o={}; local op=print; _G.print=function(...) local a={...}; local l=""; for i=1,#a do l=l..tostring(a[i]).."\t" end; table.insert(o,l) end; local args={}; for arg in command:gmatch("[^%s]+") do table.insert(args,arg) end; local cmd=args[1]; if adminCommands[cmd] then adminCommands[cmd](args) else print("Unknown command.") end; _G.print=op; return table.concat(o,"\n") end

--==============================================================================
-- Main Program Loops
--==============================================================================

local function handleRednetMessage(senderId, message, protocol) if protocol=="SimpleMail"and message and message.type and mailHandlers[message.type]then mailHandlers[message.type](senderId,message)elseif protocol=="SimpleChat"and message and message.from then local n=(users[message.from]and users[message.from].nickname)or m.from;local e="["..n.."]: "..m.text;table.insert(chatHistory,e);if #chatHistory>100 then table.remove(chatHistory,1)end;saveTableToFile(CHAT_DB,chatHistory);rednet.broadcast({from=n,text=message.text},"SimpleChat")elseif protocol=="ArcadeGames"and message and message.type and gameHandlers[message.type]then gameHandlers[message.type](senderId,message)elseif protocol==AUTH_INTERLINK_PROTOCOL and message.type=="user_exists_check"then local u=message.user;rednet.send(senderId,{user=u,exists=(users[u]~=nil)},AUTH_INTERLINK_PROTOCOL)elseif protocol==ADMIN_PROTOCOL and message.type=="execute_command"then if message.user and admins[message.user]then logActivity("Remote cmd from "..message.user);local out=executeAdminCommand(message.command);rednet.send(senderId,{output=out},ADMIN_PROTOCOL)else logActivity("Unauthorized cmd from "..(message.user or"unknown"),true);rednet.send(senderId,{output="Access denied."},ADMIN_PROTOCOL)end end end
local function handleTerminalInput(event, p1) if event=="key"then if p1==keys.enter then if adminInput~=""then logActivity("Local cmd: "..adminInput);local out=executeAdminCommand(adminInput);for l in out:gmatch("[^\n]+")do logActivity(l)end;adminInput=""end elseif p1==keys.backspace then adminInput=adminInput:sub(1,-2)end elseif event=="char"then adminInput=adminInput..p1 end;redrawAdminUI()end
local function mainEventLoop() while true do local e,p1,p2,p3=os.pullEvent();if e=="rednet_message"then handleRednetMessage(p1,p2,p3)elseif e=="key"or e=="char"then handleTerminalInput(e,p1)elseif e=="terminate"then break end end end

local function main()
    loadAllData()
    for _,side in ipairs(rs.getSides()) do if peripheral.getType(side)=="modem" then rednet.open(side) end end
    rednet.host("SimpleMail","mail.server");rednet.host("SimpleChat","chat.server");rednet.host("ArcadeGames","arcade.server");rednet.host(ADMIN_PROTOCOL,"admin.server")
    logActivity("Mainframe Server started.")
    mainEventLoop()
end

main()

